// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to create, update, and delete a synthetics monitor in New Relic.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_monitor.html.markdown.
type Monitor struct {
	s *pulumi.ResourceState
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	if args == nil || args.Frequency == nil {
		return nil, errors.New("missing required argument 'Frequency'")
	}
	if args == nil || args.Locations == nil {
		return nil, errors.New("missing required argument 'Locations'")
	}
	if args == nil || args.Status == nil {
		return nil, errors.New("missing required argument 'Status'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bypassHeadRequest"] = nil
		inputs["frequency"] = nil
		inputs["locations"] = nil
		inputs["name"] = nil
		inputs["slaThreshold"] = nil
		inputs["status"] = nil
		inputs["treatRedirectAsFailure"] = nil
		inputs["type"] = nil
		inputs["uri"] = nil
		inputs["validationString"] = nil
		inputs["verifySsl"] = nil
	} else {
		inputs["bypassHeadRequest"] = args.BypassHeadRequest
		inputs["frequency"] = args.Frequency
		inputs["locations"] = args.Locations
		inputs["name"] = args.Name
		inputs["slaThreshold"] = args.SlaThreshold
		inputs["status"] = args.Status
		inputs["treatRedirectAsFailure"] = args.TreatRedirectAsFailure
		inputs["type"] = args.Type
		inputs["uri"] = args.Uri
		inputs["validationString"] = args.ValidationString
		inputs["verifySsl"] = args.VerifySsl
	}
	s, err := ctx.RegisterResource("newrelic:synthetics/monitor:Monitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MonitorState, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bypassHeadRequest"] = state.BypassHeadRequest
		inputs["frequency"] = state.Frequency
		inputs["locations"] = state.Locations
		inputs["name"] = state.Name
		inputs["slaThreshold"] = state.SlaThreshold
		inputs["status"] = state.Status
		inputs["treatRedirectAsFailure"] = state.TreatRedirectAsFailure
		inputs["type"] = state.Type
		inputs["uri"] = state.Uri
		inputs["validationString"] = state.ValidationString
		inputs["verifySsl"] = state.VerifySsl
	}
	s, err := ctx.ReadResource("newrelic:synthetics/monitor:Monitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Monitor) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Monitor) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Bypass HEAD request.
func (r *Monitor) BypassHeadRequest() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["bypassHeadRequest"])
}

// The interval (in minutes) at which this monitor should run.
func (r *Monitor) Frequency() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["frequency"])
}

// The locations in which this monitor should be run.
func (r *Monitor) Locations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["locations"])
}

// The title of this monitor.
func (r *Monitor) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The base threshold for the SLA report.
func (r *Monitor) SlaThreshold() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["slaThreshold"])
}

// The monitor status (i.e. ENABLED, MUTED, DISABLED)
func (r *Monitor) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

func (r *Monitor) TreatRedirectAsFailure() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["treatRedirectAsFailure"])
}

// The monitor type (i.e. SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER).
func (r *Monitor) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The URI for the monitor to hit.
func (r *Monitor) Uri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["uri"])
}

// The string to validate against in the response.
func (r *Monitor) ValidationString() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["validationString"])
}

// Verify SSL.
func (r *Monitor) VerifySsl() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["verifySsl"])
}

// Input properties used for looking up and filtering Monitor resources.
type MonitorState struct {
	// Bypass HEAD request.
	BypassHeadRequest interface{}
	// The interval (in minutes) at which this monitor should run.
	Frequency interface{}
	// The locations in which this monitor should be run.
	Locations interface{}
	// The title of this monitor.
	Name interface{}
	// The base threshold for the SLA report.
	SlaThreshold interface{}
	// The monitor status (i.e. ENABLED, MUTED, DISABLED)
	Status interface{}
	TreatRedirectAsFailure interface{}
	// The monitor type (i.e. SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER).
	Type interface{}
	// The URI for the monitor to hit.
	Uri interface{}
	// The string to validate against in the response.
	ValidationString interface{}
	// Verify SSL.
	VerifySsl interface{}
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// Bypass HEAD request.
	BypassHeadRequest interface{}
	// The interval (in minutes) at which this monitor should run.
	Frequency interface{}
	// The locations in which this monitor should be run.
	Locations interface{}
	// The title of this monitor.
	Name interface{}
	// The base threshold for the SLA report.
	SlaThreshold interface{}
	// The monitor status (i.e. ENABLED, MUTED, DISABLED)
	Status interface{}
	TreatRedirectAsFailure interface{}
	// The monitor type (i.e. SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER).
	Type interface{}
	// The URI for the monitor to hit.
	Uri interface{}
	// The string to validate against in the response.
	ValidationString interface{}
	// Verify SSL.
	VerifySsl interface{}
}
