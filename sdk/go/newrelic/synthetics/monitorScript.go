// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to update a synthetics monitor script in New Relic.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_monitor_script.html.markdown.
type MonitorScript struct {
	s *pulumi.ResourceState
}

// NewMonitorScript registers a new resource with the given unique name, arguments, and options.
func NewMonitorScript(ctx *pulumi.Context,
	name string, args *MonitorScriptArgs, opts ...pulumi.ResourceOpt) (*MonitorScript, error) {
	if args == nil || args.MonitorId == nil {
		return nil, errors.New("missing required argument 'MonitorId'")
	}
	if args == nil || args.Text == nil {
		return nil, errors.New("missing required argument 'Text'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["monitorId"] = nil
		inputs["text"] = nil
	} else {
		inputs["monitorId"] = args.MonitorId
		inputs["text"] = args.Text
	}
	s, err := ctx.RegisterResource("newrelic:synthetics/monitorScript:MonitorScript", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MonitorScript{s: s}, nil
}

// GetMonitorScript gets an existing MonitorScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorScript(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MonitorScriptState, opts ...pulumi.ResourceOpt) (*MonitorScript, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["monitorId"] = state.MonitorId
		inputs["text"] = state.Text
	}
	s, err := ctx.ReadResource("newrelic:synthetics/monitorScript:MonitorScript", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MonitorScript{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MonitorScript) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MonitorScript) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the monitor to attach the script to.
func (r *MonitorScript) MonitorId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["monitorId"])
}

// plaintext of the monitor script.
func (r *MonitorScript) Text() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["text"])
}

// Input properties used for looking up and filtering MonitorScript resources.
type MonitorScriptState struct {
	// The ID of the monitor to attach the script to.
	MonitorId interface{}
	// plaintext of the monitor script.
	Text interface{}
}

// The set of arguments for constructing a MonitorScript resource.
type MonitorScriptArgs struct {
	// The ID of the monitor to attach the script to.
	MonitorId interface{}
	// plaintext of the monitor script.
	Text interface{}
}
