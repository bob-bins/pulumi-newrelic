// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package plugins

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to create, update, and delete a Synthetics label in New Relic.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_label.html.markdown.
type SyntheticsLabel struct {
	pulumi.CustomResourceState

	// The URL of the Synthetics label.
	Href pulumi.StringOutput `pulumi:"href"`
	// The ID of the monitor that will be assigned the label.
	MonitorId pulumi.StringOutput `pulumi:"monitorId"`
	// A string representing the label key/category.
	Type pulumi.StringOutput `pulumi:"type"`
	// A string representing the label value.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewSyntheticsLabel registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsLabel(ctx *pulumi.Context,
	name string, args *SyntheticsLabelArgs, opts ...pulumi.ResourceOption) (*SyntheticsLabel, error) {
	if args == nil || args.MonitorId == nil {
		return nil, errors.New("missing required argument 'MonitorId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &SyntheticsLabelArgs{}
	}
	var resource SyntheticsLabel
	err := ctx.RegisterResource("newrelic:plugins/syntheticsLabel:SyntheticsLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsLabel gets an existing SyntheticsLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsLabelState, opts ...pulumi.ResourceOption) (*SyntheticsLabel, error) {
	var resource SyntheticsLabel
	err := ctx.ReadResource("newrelic:plugins/syntheticsLabel:SyntheticsLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsLabel resources.
type syntheticsLabelState struct {
	// The URL of the Synthetics label.
	Href *string `pulumi:"href"`
	// The ID of the monitor that will be assigned the label.
	MonitorId *string `pulumi:"monitorId"`
	// A string representing the label key/category.
	Type *string `pulumi:"type"`
	// A string representing the label value.
	Value *string `pulumi:"value"`
}

type SyntheticsLabelState struct {
	// The URL of the Synthetics label.
	Href pulumi.StringPtrInput
	// The ID of the monitor that will be assigned the label.
	MonitorId pulumi.StringPtrInput
	// A string representing the label key/category.
	Type pulumi.StringPtrInput
	// A string representing the label value.
	Value pulumi.StringPtrInput
}

func (SyntheticsLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsLabelState)(nil)).Elem()
}

type syntheticsLabelArgs struct {
	// The ID of the monitor that will be assigned the label.
	MonitorId string `pulumi:"monitorId"`
	// A string representing the label key/category.
	Type string `pulumi:"type"`
	// A string representing the label value.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a SyntheticsLabel resource.
type SyntheticsLabelArgs struct {
	// The ID of the monitor that will be assigned the label.
	MonitorId pulumi.StringInput
	// A string representing the label key/category.
	Type pulumi.StringInput
	// A string representing the label value.
	Value pulumi.StringInput
}

func (SyntheticsLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsLabelArgs)(nil)).Elem()
}

