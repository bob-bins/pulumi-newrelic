// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package plugins

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to create and manage New Relic Synthetic secure credentials.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_secure_credential.html.markdown.
type SyntheticsSecureCredential struct {
	pulumi.CustomResourceState

	// The time the secure credential was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The secure credential's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
	Key pulumi.StringOutput `pulumi:"key"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The secure credential's value. 
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewSyntheticsSecureCredential registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsSecureCredential(ctx *pulumi.Context,
	name string, args *SyntheticsSecureCredentialArgs, opts ...pulumi.ResourceOption) (*SyntheticsSecureCredential, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &SyntheticsSecureCredentialArgs{}
	}
	var resource SyntheticsSecureCredential
	err := ctx.RegisterResource("newrelic:plugins/syntheticsSecureCredential:SyntheticsSecureCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsSecureCredential gets an existing SyntheticsSecureCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsSecureCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsSecureCredentialState, opts ...pulumi.ResourceOption) (*SyntheticsSecureCredential, error) {
	var resource SyntheticsSecureCredential
	err := ctx.ReadResource("newrelic:plugins/syntheticsSecureCredential:SyntheticsSecureCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsSecureCredential resources.
type syntheticsSecureCredentialState struct {
	// The time the secure credential was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The secure credential's description.
	Description *string `pulumi:"description"`
	// The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
	Key *string `pulumi:"key"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// The secure credential's value. 
	Value *string `pulumi:"value"`
}

type SyntheticsSecureCredentialState struct {
	// The time the secure credential was created.
	CreatedAt pulumi.StringPtrInput
	// The secure credential's description.
	Description pulumi.StringPtrInput
	// The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
	Key pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// The secure credential's value. 
	Value pulumi.StringPtrInput
}

func (SyntheticsSecureCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsSecureCredentialState)(nil)).Elem()
}

type syntheticsSecureCredentialArgs struct {
	// The time the secure credential was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The secure credential's description.
	Description *string `pulumi:"description"`
	// The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
	Key string `pulumi:"key"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// The secure credential's value. 
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a SyntheticsSecureCredential resource.
type SyntheticsSecureCredentialArgs struct {
	// The time the secure credential was created.
	CreatedAt pulumi.StringPtrInput
	// The secure credential's description.
	Description pulumi.StringPtrInput
	// The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.
	Key pulumi.StringInput
	LastUpdated pulumi.StringPtrInput
	// The secure credential's value. 
	Value pulumi.StringInput
}

func (SyntheticsSecureCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsSecureCredentialArgs)(nil)).Elem()
}

