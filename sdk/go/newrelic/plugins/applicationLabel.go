// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package plugins

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// #### DEPRECATED! Use at your own risk. This feature may be removed in the next major release.
// Use this resource to create, update, and delete an Application label in New Relic.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/application_label.html.markdown.
type ApplicationLabel struct {
	pulumi.CustomResourceState

	// A string representing the label key/category.
	Category pulumi.StringOutput `pulumi:"category"`
	// The resources to which label should be assigned to. At least one of the following attributes must be set.
	Links ApplicationLabelLinkArrayOutput `pulumi:"links"`
	// A string that will be assigned to the label.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewApplicationLabel registers a new resource with the given unique name, arguments, and options.
func NewApplicationLabel(ctx *pulumi.Context,
	name string, args *ApplicationLabelArgs, opts ...pulumi.ResourceOption) (*ApplicationLabel, error) {
	if args == nil || args.Category == nil {
		return nil, errors.New("missing required argument 'Category'")
	}
	if args == nil || args.Links == nil {
		return nil, errors.New("missing required argument 'Links'")
	}
	if args == nil {
		args = &ApplicationLabelArgs{}
	}
	var resource ApplicationLabel
	err := ctx.RegisterResource("newrelic:plugins/applicationLabel:ApplicationLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationLabel gets an existing ApplicationLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationLabelState, opts ...pulumi.ResourceOption) (*ApplicationLabel, error) {
	var resource ApplicationLabel
	err := ctx.ReadResource("newrelic:plugins/applicationLabel:ApplicationLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationLabel resources.
type applicationLabelState struct {
	// A string representing the label key/category.
	Category *string `pulumi:"category"`
	// The resources to which label should be assigned to. At least one of the following attributes must be set.
	Links []ApplicationLabelLink `pulumi:"links"`
	// A string that will be assigned to the label.
	Name *string `pulumi:"name"`
}

type ApplicationLabelState struct {
	// A string representing the label key/category.
	Category pulumi.StringPtrInput
	// The resources to which label should be assigned to. At least one of the following attributes must be set.
	Links ApplicationLabelLinkArrayInput
	// A string that will be assigned to the label.
	Name pulumi.StringPtrInput
}

func (ApplicationLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationLabelState)(nil)).Elem()
}

type applicationLabelArgs struct {
	// A string representing the label key/category.
	Category string `pulumi:"category"`
	// The resources to which label should be assigned to. At least one of the following attributes must be set.
	Links []ApplicationLabelLink `pulumi:"links"`
	// A string that will be assigned to the label.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ApplicationLabel resource.
type ApplicationLabelArgs struct {
	// A string representing the label key/category.
	Category pulumi.StringInput
	// The resources to which label should be assigned to. At least one of the following attributes must be set.
	Links ApplicationLabelLinkArrayInput
	// A string that will be assigned to the label.
	Name pulumi.StringPtrInput
}

func (ApplicationLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationLabelArgs)(nil)).Elem()
}

