// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package plugins

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to create and manage plugins alert conditions in New Relic.
// 
// ## Terms
// 
// The `term` mapping supports the following arguments:
// 
//   * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.
//   * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.
//   * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`.
//   * `threshold` - (Required) Must be 0 or greater.
//   * `timeFunction` - (Required) `all` or `any`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/plugins_alert_condition.html.markdown.
type AlertCondition struct {
	s *pulumi.ResourceState
}

// NewAlertCondition registers a new resource with the given unique name, arguments, and options.
func NewAlertCondition(ctx *pulumi.Context,
	name string, args *AlertConditionArgs, opts ...pulumi.ResourceOpt) (*AlertCondition, error) {
	if args == nil || args.Entities == nil {
		return nil, errors.New("missing required argument 'Entities'")
	}
	if args == nil || args.Metric == nil {
		return nil, errors.New("missing required argument 'Metric'")
	}
	if args == nil || args.MetricDescription == nil {
		return nil, errors.New("missing required argument 'MetricDescription'")
	}
	if args == nil || args.PluginGuid == nil {
		return nil, errors.New("missing required argument 'PluginGuid'")
	}
	if args == nil || args.PluginId == nil {
		return nil, errors.New("missing required argument 'PluginId'")
	}
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	if args == nil || args.Terms == nil {
		return nil, errors.New("missing required argument 'Terms'")
	}
	if args == nil || args.ValueFunction == nil {
		return nil, errors.New("missing required argument 'ValueFunction'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enabled"] = nil
		inputs["entities"] = nil
		inputs["metric"] = nil
		inputs["metricDescription"] = nil
		inputs["name"] = nil
		inputs["pluginGuid"] = nil
		inputs["pluginId"] = nil
		inputs["policyId"] = nil
		inputs["runbookUrl"] = nil
		inputs["terms"] = nil
		inputs["valueFunction"] = nil
	} else {
		inputs["enabled"] = args.Enabled
		inputs["entities"] = args.Entities
		inputs["metric"] = args.Metric
		inputs["metricDescription"] = args.MetricDescription
		inputs["name"] = args.Name
		inputs["pluginGuid"] = args.PluginGuid
		inputs["pluginId"] = args.PluginId
		inputs["policyId"] = args.PolicyId
		inputs["runbookUrl"] = args.RunbookUrl
		inputs["terms"] = args.Terms
		inputs["valueFunction"] = args.ValueFunction
	}
	s, err := ctx.RegisterResource("newrelic:plugins/alertCondition:AlertCondition", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertCondition{s: s}, nil
}

// GetAlertCondition gets an existing AlertCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertCondition(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertConditionState, opts ...pulumi.ResourceOpt) (*AlertCondition, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enabled"] = state.Enabled
		inputs["entities"] = state.Entities
		inputs["metric"] = state.Metric
		inputs["metricDescription"] = state.MetricDescription
		inputs["name"] = state.Name
		inputs["pluginGuid"] = state.PluginGuid
		inputs["pluginId"] = state.PluginId
		inputs["policyId"] = state.PolicyId
		inputs["runbookUrl"] = state.RunbookUrl
		inputs["terms"] = state.Terms
		inputs["valueFunction"] = state.ValueFunction
	}
	s, err := ctx.ReadResource("newrelic:plugins/alertCondition:AlertCondition", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertCondition{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertCondition) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertCondition) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *AlertCondition) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *AlertCondition) Entities() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["entities"])
}

// The metric field accepts parameters based on the `type` set.
func (r *AlertCondition) Metric() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["metric"])
}

func (r *AlertCondition) MetricDescription() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["metricDescription"])
}

// The title of the condition. Must be between 1 and 64 characters, inclusive.
func (r *AlertCondition) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The GUID of the plugin which produces the metric.
func (r *AlertCondition) PluginGuid() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginGuid"])
}

// The ID of the installed plugin instance which produces the metric.
func (r *AlertCondition) PluginId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pluginId"])
}

// The ID of the policy where this condition should be used.
func (r *AlertCondition) PolicyId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["policyId"])
}

// Runbook URL to display in notifications.
func (r *AlertCondition) RunbookUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["runbookUrl"])
}

// A list of terms for this condition. See Terms below for details.
func (r *AlertCondition) Terms() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["terms"])
}

func (r *AlertCondition) ValueFunction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["valueFunction"])
}

// Input properties used for looking up and filtering AlertCondition resources.
type AlertConditionState struct {
	Enabled interface{}
	Entities interface{}
	// The metric field accepts parameters based on the `type` set.
	Metric interface{}
	MetricDescription interface{}
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name interface{}
	// The GUID of the plugin which produces the metric.
	PluginGuid interface{}
	// The ID of the installed plugin instance which produces the metric.
	PluginId interface{}
	// The ID of the policy where this condition should be used.
	PolicyId interface{}
	// Runbook URL to display in notifications.
	RunbookUrl interface{}
	// A list of terms for this condition. See Terms below for details.
	Terms interface{}
	ValueFunction interface{}
}

// The set of arguments for constructing a AlertCondition resource.
type AlertConditionArgs struct {
	Enabled interface{}
	Entities interface{}
	// The metric field accepts parameters based on the `type` set.
	Metric interface{}
	MetricDescription interface{}
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name interface{}
	// The GUID of the plugin which produces the metric.
	PluginGuid interface{}
	// The ID of the installed plugin instance which produces the metric.
	PluginId interface{}
	// The ID of the policy where this condition should be used.
	PolicyId interface{}
	// Runbook URL to display in notifications.
	RunbookUrl interface{}
	// A list of terms for this condition. See Terms below for details.
	Terms interface{}
	ValueFunction interface{}
}
