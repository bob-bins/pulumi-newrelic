// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AlertPolicy struct {
	s *pulumi.ResourceState
}

// NewAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewAlertPolicy(ctx *pulumi.Context,
	name string, args *AlertPolicyArgs, opts ...pulumi.ResourceOpt) (*AlertPolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["incidentPreference"] = nil
		inputs["name"] = nil
	} else {
		inputs["incidentPreference"] = args.IncidentPreference
		inputs["name"] = args.Name
	}
	inputs["createdAt"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("newrelic:index/alertPolicy:AlertPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicy{s: s}, nil
}

// GetAlertPolicy gets an existing AlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertPolicyState, opts ...pulumi.ResourceOpt) (*AlertPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdAt"] = state.CreatedAt
		inputs["incidentPreference"] = state.IncidentPreference
		inputs["name"] = state.Name
		inputs["updatedAt"] = state.UpdatedAt
	}
	s, err := ctx.ReadResource("newrelic:index/alertPolicy:AlertPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The time the policy was created.
func (r *AlertPolicy) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
func (r *AlertPolicy) IncidentPreference() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["incidentPreference"])
}

// The name of the policy.   Must be between 1 and 64 characters, inclusive.
func (r *AlertPolicy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The time the policy was last updated.
func (r *AlertPolicy) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Input properties used for looking up and filtering AlertPolicy resources.
type AlertPolicyState struct {
	// The time the policy was created.
	CreatedAt interface{}
	// The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
	IncidentPreference interface{}
	// The name of the policy.   Must be between 1 and 64 characters, inclusive.
	Name interface{}
	// The time the policy was last updated.
	UpdatedAt interface{}
}

// The set of arguments for constructing a AlertPolicy resource.
type AlertPolicyArgs struct {
	// The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
	IncidentPreference interface{}
	// The name of the policy.   Must be between 1 and 64 characters, inclusive.
	Name interface{}
}
