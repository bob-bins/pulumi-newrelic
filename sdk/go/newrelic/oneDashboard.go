// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// **NOTE:** This feature is currently in **CLOSED BETA**, and will **NOT WORK** for most New Relic customers and is subject to **BREAKING CHANGES**.
//
// Use this resource to create and manage New Relic One dashboards.
//
// ## Example Usage
// ## Additional Examples
//
// ## Import
//
// New Relic dashboards can be imported using their GUID, e.g.
//
// ```sh
//  $ pulumi import newrelic:index/oneDashboard:OneDashboard my_dashboard <Dashboard GUID>
// ```
type OneDashboard struct {
	pulumi.CustomResourceState

	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntOutput `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardPageArrayOutput `pulumi:"pages"`
	// The URL for viewing the dashboard.
	Permalink pulumi.StringOutput `pulumi:"permalink"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`.  Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
}

// NewOneDashboard registers a new resource with the given unique name, arguments, and options.
func NewOneDashboard(ctx *pulumi.Context,
	name string, args *OneDashboardArgs, opts ...pulumi.ResourceOption) (*OneDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Pages == nil {
		return nil, errors.New("invalid value for required argument 'Pages'")
	}
	var resource OneDashboard
	err := ctx.RegisterResource("newrelic:index/oneDashboard:OneDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOneDashboard gets an existing OneDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOneDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OneDashboardState, opts ...pulumi.ResourceOption) (*OneDashboard, error) {
	var resource OneDashboard
	err := ctx.ReadResource("newrelic:index/oneDashboard:OneDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OneDashboard resources.
type oneDashboardState struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name *string `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages []OneDashboardPage `pulumi:"pages"`
	// The URL for viewing the dashboard.
	Permalink *string `pulumi:"permalink"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`.  Defaults to `publicReadOnly`.
	Permissions *string `pulumi:"permissions"`
}

type OneDashboardState struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput
	// The title of the dashboard.
	Name pulumi.StringPtrInput
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardPageArrayInput
	// The URL for viewing the dashboard.
	Permalink pulumi.StringPtrInput
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`.  Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrInput
}

func (OneDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*oneDashboardState)(nil)).Elem()
}

type oneDashboardArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The title of the dashboard.
	Name *string `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages []OneDashboardPage `pulumi:"pages"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`.  Defaults to `publicReadOnly`.
	Permissions *string `pulumi:"permissions"`
}

// The set of arguments for constructing a OneDashboard resource.
type OneDashboardArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput
	// The title of the dashboard.
	Name pulumi.StringPtrInput
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardPageArrayInput
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`.  Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrInput
}

func (OneDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oneDashboardArgs)(nil)).Elem()
}

type OneDashboardInput interface {
	pulumi.Input

	ToOneDashboardOutput() OneDashboardOutput
	ToOneDashboardOutputWithContext(ctx context.Context) OneDashboardOutput
}

func (OneDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboard)(nil)).Elem()
}

func (i OneDashboard) ToOneDashboardOutput() OneDashboardOutput {
	return i.ToOneDashboardOutputWithContext(context.Background())
}

func (i OneDashboard) ToOneDashboardOutputWithContext(ctx context.Context) OneDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardOutput)
}

type OneDashboardOutput struct {
	*pulumi.OutputState
}

func (OneDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardOutput)(nil)).Elem()
}

func (o OneDashboardOutput) ToOneDashboardOutput() OneDashboardOutput {
	return o
}

func (o OneDashboardOutput) ToOneDashboardOutputWithContext(ctx context.Context) OneDashboardOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OneDashboardOutput{})
}
