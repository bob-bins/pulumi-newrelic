// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get information about an specific alert channel in New Relic which already exists (e.g newrelic user).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/d/alert_channel.html.markdown.
func LookupAlertChannel(ctx *pulumi.Context, args *GetAlertChannelArgs) (*GetAlertChannelResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["name"] = args.Name
	}
	outputs, err := ctx.Invoke("newrelic:index/getAlertChannel:getAlertChannel", inputs)
	if err != nil {
		return nil, err
	}
	return &GetAlertChannelResult{
		Name: outputs["name"],
		PolicyIds: outputs["policyIds"],
		Type: outputs["type"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getAlertChannel.
type GetAlertChannelArgs struct {
	// The name of the alert channel in New Relic.
	Name interface{}
}

// A collection of values returned by getAlertChannel.
type GetAlertChannelResult struct {
	Name interface{}
	// A list of policy IDs associated with the alert channel.
	PolicyIds interface{}
	// Alert channel type, either: `campfire`, `email`, `hipchat`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`..
	Type interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
