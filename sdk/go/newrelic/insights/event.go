// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package insights

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/insights_event.html.markdown.
type Event struct {
	s *pulumi.ResourceState
}

// NewEvent registers a new resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context,
	name string, args *EventArgs, opts ...pulumi.ResourceOpt) (*Event, error) {
	if args == nil || args.Events == nil {
		return nil, errors.New("missing required argument 'Events'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["events"] = nil
	} else {
		inputs["events"] = args.Events
	}
	s, err := ctx.RegisterResource("newrelic:insights/event:Event", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Event{s: s}, nil
}

// GetEvent gets an existing Event resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvent(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventState, opts ...pulumi.ResourceOpt) (*Event, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["events"] = state.Events
	}
	s, err := ctx.ReadResource("newrelic:insights/event:Event", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Event{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Event) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Event) ID() pulumi.IDOutput {
	return r.s.ID()
}

// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
func (r *Event) Events() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["events"])
}

// Input properties used for looking up and filtering Event resources.
type EventState struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events interface{}
}

// The set of arguments for constructing a Event resource.
type EventArgs struct {
	// An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.
	Events interface{}
}
