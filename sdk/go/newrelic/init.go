// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "newrelic:index/alertChannel:AlertChannel":
		r, err = NewAlertChannel(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/alertCondition:AlertCondition":
		r, err = NewAlertCondition(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/alertMutingRule:AlertMutingRule":
		r, err = NewAlertMutingRule(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/alertPolicy:AlertPolicy":
		r, err = NewAlertPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/alertPolicyChannel:AlertPolicyChannel":
		r, err = NewAlertPolicyChannel(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/apiAccessKey:ApiAccessKey":
		r, err = NewApiAccessKey(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/dashboard:Dashboard":
		r, err = NewDashboard(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/entityTags:EntityTags":
		r, err = NewEntityTags(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/eventsToMetricsRule:EventsToMetricsRule":
		r, err = NewEventsToMetricsRule(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/infraAlertCondition:InfraAlertCondition":
		r, err = NewInfraAlertCondition(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/nrqlAlertCondition:NrqlAlertCondition":
		r, err = NewNrqlAlertCondition(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/nrqlDropRule:NrqlDropRule":
		r, err = NewNrqlDropRule(ctx, name, nil, pulumi.URN_(urn))
	case "newrelic:index/oneDashboard:OneDashboard":
		r, err = NewOneDashboard(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:newrelic" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/alertChannel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/alertCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/alertMutingRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/alertPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/alertPolicyChannel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/apiAccessKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/dashboard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/entityTags",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/eventsToMetricsRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/infraAlertCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/nrqlAlertCondition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/nrqlDropRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"newrelic",
		"index/oneDashboard",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"newrelic",
		&pkg{version},
	)
}
