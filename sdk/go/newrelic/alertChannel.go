// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AlertChannel struct {
	s *pulumi.ResourceState
}

// NewAlertChannel registers a new resource with the given unique name, arguments, and options.
func NewAlertChannel(ctx *pulumi.Context,
	name string, args *AlertChannelArgs, opts ...pulumi.ResourceOpt) (*AlertChannel, error) {
	if args == nil || args.Configuration == nil {
		return nil, errors.New("missing required argument 'Configuration'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["configuration"] = nil
		inputs["name"] = nil
		inputs["type"] = nil
	} else {
		inputs["configuration"] = args.Configuration
		inputs["name"] = args.Name
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("newrelic:index/alertChannel:AlertChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertChannel{s: s}, nil
}

// GetAlertChannel gets an existing AlertChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertChannelState, opts ...pulumi.ResourceOpt) (*AlertChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["configuration"] = state.Configuration
		inputs["name"] = state.Name
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("newrelic:index/alertChannel:AlertChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertChannel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertChannel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A map of key / value pairs with channel type specific values.
func (r *AlertChannel) Configuration() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["configuration"])
}

// The name of the channel.
func (r *AlertChannel) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The type of channel.  One of: `campfire`, `email`, `hipchat`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.
func (r *AlertChannel) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AlertChannel resources.
type AlertChannelState struct {
	// A map of key / value pairs with channel type specific values.
	Configuration interface{}
	// The name of the channel.
	Name interface{}
	// The type of channel.  One of: `campfire`, `email`, `hipchat`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.
	Type interface{}
}

// The set of arguments for constructing a AlertChannel resource.
type AlertChannelArgs struct {
	// A map of key / value pairs with channel type specific values.
	Configuration interface{}
	// The name of the channel.
	Name interface{}
	// The type of channel.  One of: `campfire`, `email`, `hipchat`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.
	Type interface{}
}
