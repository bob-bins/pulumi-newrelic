// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this resource to map alert policies to alert channels in New Relic.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_policy_channel.html.markdown.
type AlertPolicyChannel struct {
	s *pulumi.ResourceState
}

// NewAlertPolicyChannel registers a new resource with the given unique name, arguments, and options.
func NewAlertPolicyChannel(ctx *pulumi.Context,
	name string, args *AlertPolicyChannelArgs, opts ...pulumi.ResourceOpt) (*AlertPolicyChannel, error) {
	if args == nil || args.ChannelId == nil {
		return nil, errors.New("missing required argument 'ChannelId'")
	}
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["channelId"] = nil
		inputs["policyId"] = nil
	} else {
		inputs["channelId"] = args.ChannelId
		inputs["policyId"] = args.PolicyId
	}
	s, err := ctx.RegisterResource("newrelic:index/alertPolicyChannel:AlertPolicyChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicyChannel{s: s}, nil
}

// GetAlertPolicyChannel gets an existing AlertPolicyChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPolicyChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertPolicyChannelState, opts ...pulumi.ResourceOpt) (*AlertPolicyChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["channelId"] = state.ChannelId
		inputs["policyId"] = state.PolicyId
	}
	s, err := ctx.ReadResource("newrelic:index/alertPolicyChannel:AlertPolicyChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicyChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertPolicyChannel) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertPolicyChannel) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the channel.
func (r *AlertPolicyChannel) ChannelId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["channelId"])
}

// The ID of the policy.
func (r *AlertPolicyChannel) PolicyId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["policyId"])
}

// Input properties used for looking up and filtering AlertPolicyChannel resources.
type AlertPolicyChannelState struct {
	// The ID of the channel.
	ChannelId interface{}
	// The ID of the policy.
	PolicyId interface{}
}

// The set of arguments for constructing a AlertPolicyChannel resource.
type AlertPolicyChannelArgs struct {
	// The ID of the channel.
	ChannelId interface{}
	// The ID of the policy.
	PolicyId interface{}
}
