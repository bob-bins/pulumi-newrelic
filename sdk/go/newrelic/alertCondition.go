// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## Terms
// 
// The `term` mapping supports the following arguments:
// 
//   * `duration` - (Required) In minutes, must be: `5`, `10`, `15`, `30`, `60`, or `120`.
//   * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.
//   * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`.
//   * `threshold` - (Required) Must be 0 or greater.
//   * `time_function` - (Required) `all` or `any`.
type AlertCondition struct {
	s *pulumi.ResourceState
}

// NewAlertCondition registers a new resource with the given unique name, arguments, and options.
func NewAlertCondition(ctx *pulumi.Context,
	name string, args *AlertConditionArgs, opts ...pulumi.ResourceOpt) (*AlertCondition, error) {
	if args == nil || args.Entities == nil {
		return nil, errors.New("missing required argument 'Entities'")
	}
	if args == nil || args.Metric == nil {
		return nil, errors.New("missing required argument 'Metric'")
	}
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	if args == nil || args.Terms == nil {
		return nil, errors.New("missing required argument 'Terms'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["conditionScope"] = nil
		inputs["enabled"] = nil
		inputs["entities"] = nil
		inputs["gcMetric"] = nil
		inputs["metric"] = nil
		inputs["name"] = nil
		inputs["policyId"] = nil
		inputs["runbookUrl"] = nil
		inputs["terms"] = nil
		inputs["type"] = nil
		inputs["userDefinedMetric"] = nil
		inputs["userDefinedValueFunction"] = nil
		inputs["violationCloseTimer"] = nil
	} else {
		inputs["conditionScope"] = args.ConditionScope
		inputs["enabled"] = args.Enabled
		inputs["entities"] = args.Entities
		inputs["gcMetric"] = args.GcMetric
		inputs["metric"] = args.Metric
		inputs["name"] = args.Name
		inputs["policyId"] = args.PolicyId
		inputs["runbookUrl"] = args.RunbookUrl
		inputs["terms"] = args.Terms
		inputs["type"] = args.Type
		inputs["userDefinedMetric"] = args.UserDefinedMetric
		inputs["userDefinedValueFunction"] = args.UserDefinedValueFunction
		inputs["violationCloseTimer"] = args.ViolationCloseTimer
	}
	s, err := ctx.RegisterResource("newrelic:index/alertCondition:AlertCondition", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertCondition{s: s}, nil
}

// GetAlertCondition gets an existing AlertCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertCondition(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertConditionState, opts ...pulumi.ResourceOpt) (*AlertCondition, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["conditionScope"] = state.ConditionScope
		inputs["enabled"] = state.Enabled
		inputs["entities"] = state.Entities
		inputs["gcMetric"] = state.GcMetric
		inputs["metric"] = state.Metric
		inputs["name"] = state.Name
		inputs["policyId"] = state.PolicyId
		inputs["runbookUrl"] = state.RunbookUrl
		inputs["terms"] = state.Terms
		inputs["type"] = state.Type
		inputs["userDefinedMetric"] = state.UserDefinedMetric
		inputs["userDefinedValueFunction"] = state.UserDefinedValueFunction
		inputs["violationCloseTimer"] = state.ViolationCloseTimer
	}
	s, err := ctx.ReadResource("newrelic:index/alertCondition:AlertCondition", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertCondition{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertCondition) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertCondition) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
func (r *AlertCondition) ConditionScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["conditionScope"])
}

func (r *AlertCondition) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The instance IDS associated with this condition.
func (r *AlertCondition) Entities() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["entities"])
}

// A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
func (r *AlertCondition) GcMetric() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gcMetric"])
}

// The metric field accepts parameters based on the `type` set.
func (r *AlertCondition) Metric() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metric"])
}

// The title of the condition. Must be between 1 and 64 characters, inclusive.
func (r *AlertCondition) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the policy where this condition should be used.
func (r *AlertCondition) PolicyId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["policyId"])
}

// Runbook URL to display in notifications.
func (r *AlertCondition) RunbookUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["runbookUrl"])
}

// A list of terms for this condition. See Terms below for details.
func (r *AlertCondition) Terms() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["terms"])
}

// The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
func (r *AlertCondition) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// A custom metric to be evaluated.
func (r *AlertCondition) UserDefinedMetric() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userDefinedMetric"])
}

// One of: `average`, `min`, `max`, `total`, or `sample_size`.
func (r *AlertCondition) UserDefinedValueFunction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userDefinedValueFunction"])
}

// Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
func (r *AlertCondition) ViolationCloseTimer() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["violationCloseTimer"])
}

// Input properties used for looking up and filtering AlertCondition resources.
type AlertConditionState struct {
	// `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
	ConditionScope interface{}
	Enabled interface{}
	// The instance IDS associated with this condition.
	Entities interface{}
	// A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
	GcMetric interface{}
	// The metric field accepts parameters based on the `type` set.
	Metric interface{}
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name interface{}
	// The ID of the policy where this condition should be used.
	PolicyId interface{}
	// Runbook URL to display in notifications.
	RunbookUrl interface{}
	// A list of terms for this condition. See Terms below for details.
	Terms interface{}
	// The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
	Type interface{}
	// A custom metric to be evaluated.
	UserDefinedMetric interface{}
	// One of: `average`, `min`, `max`, `total`, or `sample_size`.
	UserDefinedValueFunction interface{}
	// Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
	ViolationCloseTimer interface{}
}

// The set of arguments for constructing a AlertCondition resource.
type AlertConditionArgs struct {
	// `instance` or `application`.  This is required if you are using the JVM plugin in New Relic.
	ConditionScope interface{}
	Enabled interface{}
	// The instance IDS associated with this condition.
	Entities interface{}
	// A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.
	GcMetric interface{}
	// The metric field accepts parameters based on the `type` set.
	Metric interface{}
	// The title of the condition. Must be between 1 and 64 characters, inclusive.
	Name interface{}
	// The ID of the policy where this condition should be used.
	PolicyId interface{}
	// Runbook URL to display in notifications.
	RunbookUrl interface{}
	// A list of terms for this condition. See Terms below for details.
	Terms interface{}
	// The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `servers_metric`, `browser_metric`, `mobile_metric`
	Type interface{}
	// A custom metric to be evaluated.
	UserDefinedMetric interface{}
	// One of: `average`, `min`, `max`, `total`, or `sample_size`.
	UserDefinedValueFunction interface{}
	// Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.
	ViolationCloseTimer interface{}
}
