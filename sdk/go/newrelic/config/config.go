// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

func GetApiKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:apiKey")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "NEWRELIC_API_KEY").(string); ok {
		return dv
	}
	return v
}

func GetApiUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:apiUrl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("https://api.newrelic.com/v2", nil, "NEWRELIC_API_URL").(string); ok {
		return dv
	}
	return v
}

func GetCacertFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:cacertFile")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "NEWRELIC_API_CACERT").(string); ok {
		return dv
	}
	return v
}

func GetInfraApiUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:infraApiUrl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("https://infra-api.newrelic.com/v2", nil, "NEWRELIC_INFRA_API_URL").(string); ok {
		return dv
	}
	return v
}

func GetInsecureSkipVerify(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "newrelic:insecureSkipVerify")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "NEWRELIC_API_SKIP_VERIFY").(bool); ok {
		return dv
	}
	return v
}

func GetInsightsAccountId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:insightsAccountId")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_ACCOUNT_ID").(string); ok {
		return dv
	}
	return v
}

func GetInsightsInsertKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:insightsInsertKey")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_INSERT_KEY").(string); ok {
		return dv
	}
	return v
}

func GetInsightsInsertUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:insightsInsertUrl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("https://insights-collector.newrelic.com/v1/accounts", nil, "NEWRELIC_INSIGHTS_INSERT_URL").(string); ok {
		return dv
	}
	return v
}

func GetInsightsQueryKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:insightsQueryKey")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "NEWRELIC_INSIGHTS_QUERY_KEY").(string); ok {
		return dv
	}
	return v
}

func GetInsightsQueryUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:insightsQueryUrl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("https://insights-api.newrelic.com/v1/accounts", nil, "NEWRELIC_INSIGHTS_QUERY_URL").(string); ok {
		return dv
	}
	return v
}

func GetSyntheticsApiUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "newrelic:syntheticsApiUrl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("https://synthetics.newrelic.com/synthetics/api/v3", nil, "NEWRELIC_SYNTHETICS_API_URL").(string); ok {
		return dv
	}
	return v
}
