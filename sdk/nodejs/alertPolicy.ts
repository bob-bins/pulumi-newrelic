// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this resource to create and manage New Relic alert policies.
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 * 
 * const foo = new newrelic.AlertPolicy("foo", {
 *     incidentPreference: "PER_POLICY", // PER_POLICY is default
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_policy.html.markdown.
 */
export class AlertPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertPolicyState, opts?: pulumi.CustomResourceOptions): AlertPolicy {
        return new AlertPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:index/alertPolicy:AlertPolicy';

    /**
     * Returns true if the given object is an instance of AlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPolicy.__pulumiType;
    }

    /**
     * An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will
     * result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs
     * cannot be imported via terraform import.
     */
    public readonly channelIds!: pulumi.Output<number[] | undefined>;
    /**
     * The time the policy was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
     */
    public readonly incidentPreference!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The time the policy was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a AlertPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertPolicyArgs | AlertPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AlertPolicyState | undefined;
            inputs["channelIds"] = state ? state.channelIds : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["incidentPreference"] = state ? state.incidentPreference : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as AlertPolicyArgs | undefined;
            inputs["channelIds"] = args ? args.channelIds : undefined;
            inputs["incidentPreference"] = args ? args.incidentPreference : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AlertPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertPolicy resources.
 */
export interface AlertPolicyState {
    /**
     * An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will
     * result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs
     * cannot be imported via terraform import.
     */
    readonly channelIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The time the policy was created.
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
     */
    readonly incidentPreference?: pulumi.Input<string>;
    /**
     * The name of the policy.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The time the policy was last updated.
     */
    readonly updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertPolicy resource.
 */
export interface AlertPolicyArgs {
    /**
     * An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will
     * result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs
     * cannot be imported via terraform import.
     */
    readonly channelIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.
     */
    readonly incidentPreference?: pulumi.Input<string>;
    /**
     * The name of the policy.
     */
    readonly name?: pulumi.Input<string>;
}
