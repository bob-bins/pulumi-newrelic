// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as newrelic from "@pulumi/newrelic";
 * 
 * const exampledash = new newrelic.Dashboard("exampledash", {
 *     title: "New Relic Terraform Example",
 *     widgets: [
 *         {
 *             column: 1,
 *             nrql: "SELECT AVERAGE(duration) from Transaction FACET appName TIMESERIES auto",
 *             row: 1,
 *             title: "Average Transaction Duration",
 *             visualization: "faceted_line_chart",
 *             width: 2,
 *         },
 *         {
 *             column: 3,
 *             nrql: "SELECT count(*) FROM PageView SINCE 1 week ago",
 *             row: 1,
 *             title: "Page Views",
 *             visualization: "billboard",
 *         },
 *     ],
 * });
 * ```
 * 
 * ## Widgets
 * 
 * The `widget` mapping supports the following arguments:
 * 
 *   * `title` - (Required) A title for the widget.
 *   * `visualization` - (Required) How the widget visualizes data.
 *   * `row` - (Required) Row position of widget from top left, starting at `1`.
 *   * `column` - (Required) Column position of widget from top left, starting at `1`.
 *   * `width` - (Optional) Width of the widget. Defaults to `1`.
 *   * `height` - (Optional) Height of the widget. Defaults to `1`.
 *   * `notes` - (Optional) Description of the widget.
 *   * `nrql` - (Optional) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly dashboardUrl: pulumi.Output<string>;
    /**
     * Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
     */
    public readonly editable: pulumi.Output<string | undefined>;
    public readonly filter: pulumi.Output<{ attributes?: string[], eventTypes: string[] } | undefined>;
    /**
     * The icon for the dashboard.  Defaults to `bar-chart`.
     */
    public readonly icon: pulumi.Output<string | undefined>;
    /**
     * The title of the dashboard.
     */
    public readonly title: pulumi.Output<string>;
    /**
     * Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
     */
    public readonly visibility: pulumi.Output<string | undefined>;
    /**
     * A widget that describes a visualization. See Widgets below for details.
     */
    public readonly widgets: pulumi.Output<{ column: number, height?: number, notes?: string, nrql?: string, row: number, title: string, visualization: string, width?: number }[] | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DashboardState = argsOrState as DashboardState | undefined;
            inputs["dashboardUrl"] = state ? state.dashboardUrl : undefined;
            inputs["editable"] = state ? state.editable : undefined;
            inputs["filter"] = state ? state.filter : undefined;
            inputs["icon"] = state ? state.icon : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["visibility"] = state ? state.visibility : undefined;
            inputs["widgets"] = state ? state.widgets : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            inputs["editable"] = args ? args.editable : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["icon"] = args ? args.icon : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["visibility"] = args ? args.visibility : undefined;
            inputs["widgets"] = args ? args.widgets : undefined;
            inputs["dashboardUrl"] = undefined /*out*/;
        }
        super("newrelic:index/dashboard:Dashboard", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    readonly dashboardUrl?: pulumi.Input<string>;
    /**
     * Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
     */
    readonly editable?: pulumi.Input<string>;
    readonly filter?: pulumi.Input<{ attributes?: pulumi.Input<pulumi.Input<string>[]>, eventTypes: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * The icon for the dashboard.  Defaults to `bar-chart`.
     */
    readonly icon?: pulumi.Input<string>;
    /**
     * The title of the dashboard.
     */
    readonly title?: pulumi.Input<string>;
    /**
     * Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
     */
    readonly visibility?: pulumi.Input<string>;
    /**
     * A widget that describes a visualization. See Widgets below for details.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<{ column: pulumi.Input<number>, height?: pulumi.Input<number>, notes?: pulumi.Input<string>, nrql?: pulumi.Input<string>, row: pulumi.Input<number>, title: pulumi.Input<string>, visualization: pulumi.Input<string>, width?: pulumi.Input<number> }>[]>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
     */
    readonly editable?: pulumi.Input<string>;
    readonly filter?: pulumi.Input<{ attributes?: pulumi.Input<pulumi.Input<string>[]>, eventTypes: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * The icon for the dashboard.  Defaults to `bar-chart`.
     */
    readonly icon?: pulumi.Input<string>;
    /**
     * The title of the dashboard.
     */
    readonly title: pulumi.Input<string>;
    /**
     * Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
     */
    readonly visibility?: pulumi.Input<string>;
    /**
     * A widget that describes a visualization. See Widgets below for details.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<{ column: pulumi.Input<number>, height?: pulumi.Input<number>, notes?: pulumi.Input<string>, nrql?: pulumi.Input<string>, row: pulumi.Input<number>, title: pulumi.Input<string>, visualization: pulumi.Input<string>, width?: pulumi.Input<number> }>[]>;
}
