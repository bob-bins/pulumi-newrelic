// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class MonitorScript extends pulumi.CustomResource {
    /**
     * Get an existing MonitorScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorScriptState, opts?: pulumi.CustomResourceOptions): MonitorScript {
        return new MonitorScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'newrelic:synthetics/monitorScript:MonitorScript';

    /**
     * Returns true if the given object is an instance of MonitorScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorScript.__pulumiType;
    }

    /**
     * The ID of the monitor to attach the script to.
     */
    public readonly monitorId!: pulumi.Output<string>;
    /**
     * plaintext of the monitor script.
     */
    public readonly text!: pulumi.Output<string>;

    /**
     * Create a MonitorScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorScriptArgs | MonitorScriptState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MonitorScriptState | undefined;
            inputs["monitorId"] = state ? state.monitorId : undefined;
            inputs["text"] = state ? state.text : undefined;
        } else {
            const args = argsOrState as MonitorScriptArgs | undefined;
            if (!args || args.monitorId === undefined) {
                throw new Error("Missing required property 'monitorId'");
            }
            if (!args || args.text === undefined) {
                throw new Error("Missing required property 'text'");
            }
            inputs["monitorId"] = args ? args.monitorId : undefined;
            inputs["text"] = args ? args.text : undefined;
        }
        super(MonitorScript.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorScript resources.
 */
export interface MonitorScriptState {
    /**
     * The ID of the monitor to attach the script to.
     */
    readonly monitorId?: pulumi.Input<string>;
    /**
     * plaintext of the monitor script.
     */
    readonly text?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorScript resource.
 */
export interface MonitorScriptArgs {
    /**
     * The ID of the monitor to attach the script to.
     */
    readonly monitorId: pulumi.Input<string>;
    /**
     * plaintext of the monitor script.
     */
    readonly text: pulumi.Input<string>;
}
