// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Newrelic
{
    /// <summary>
    /// ## Widgets
    /// 
    /// The `widget` mapping supports the following arguments:
    /// 
    ///   * `title` - (Required) A title for the widget.
    ///   * `visualization` - (Required) How the widget visualizes data.
    ///   * `row` - (Required) Row position of widget from top left, starting at `1`.
    ///   * `column` - (Required) Column position of widget from top left, starting at `1`.
    ///   * `width` - (Optional) Width of the widget. Defaults to `1`.
    ///   * `height` - (Optional) Height of the widget. Defaults to `1`.
    ///   * `notes` - (Optional) Description of the widget.
    ///   * `nrql` - (Optional) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/dashboard.html.markdown.
    /// </summary>
    public partial class Dashboard : Pulumi.CustomResource
    {
        [Output("dashboardUrl")]
        public Output<string> DashboardUrl { get; private set; } = null!;

        /// <summary>
        /// Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
        /// </summary>
        [Output("editable")]
        public Output<string?> Editable { get; private set; } = null!;

        [Output("filter")]
        public Output<Outputs.DashboardFilter?> Filter { get; private set; } = null!;

        /// <summary>
        /// The icon for the dashboard.  Defaults to `bar-chart`.
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
        /// </summary>
        [Output("visibility")]
        public Output<string?> Visibility { get; private set; } = null!;

        /// <summary>
        /// A widget that describes a visualization. See Widgets below for details.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.DashboardWidgets>> Widgets { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/dashboard:Dashboard", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
        /// </summary>
        [Input("editable")]
        public Input<string>? Editable { get; set; }

        [Input("filter")]
        public Input<Inputs.DashboardFilterArgs>? Filter { get; set; }

        /// <summary>
        /// The icon for the dashboard.  Defaults to `bar-chart`.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        [Input("widgets")]
        private InputList<Inputs.DashboardWidgetsArgs>? _widgets;

        /// <summary>
        /// A widget that describes a visualization. See Widgets below for details.
        /// </summary>
        public InputList<Inputs.DashboardWidgetsArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetsArgs>());
            set => _widgets = value;
        }

        public DashboardArgs()
        {
        }
    }

    public sealed class DashboardState : Pulumi.ResourceArgs
    {
        [Input("dashboardUrl")]
        public Input<string>? DashboardUrl { get; set; }

        /// <summary>
        /// Who can edit the dashboard in an account. Must be `read_only`, `editable_by_owner`, `editable_by_all`, or `all`. Defaults to `editable_by_all`.
        /// </summary>
        [Input("editable")]
        public Input<string>? Editable { get; set; }

        [Input("filter")]
        public Input<Inputs.DashboardFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// The icon for the dashboard.  Defaults to `bar-chart`.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Who can see the dashboard in an account. Must be `owner` or `all`. Defaults to `all`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        [Input("widgets")]
        private InputList<Inputs.DashboardWidgetsGetArgs>? _widgets;

        /// <summary>
        /// A widget that describes a visualization. See Widgets below for details.
        /// </summary>
        public InputList<Inputs.DashboardWidgetsGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetsGetArgs>());
            set => _widgets = value;
        }

        public DashboardState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DashboardFilterArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputList<string>? _attributes;
        public InputList<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<string>());
            set => _attributes = value;
        }

        [Input("eventTypes", required: true)]
        private InputList<string>? _eventTypes;
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        public DashboardFilterArgs()
        {
        }
    }

    public sealed class DashboardFilterGetArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputList<string>? _attributes;
        public InputList<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<string>());
            set => _attributes = value;
        }

        [Input("eventTypes", required: true)]
        private InputList<string>? _eventTypes;
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        public DashboardFilterGetArgs()
        {
        }
    }

    public sealed class DashboardWidgetsArgs : Pulumi.ResourceArgs
    {
        [Input("column", required: true)]
        public Input<int> Column { get; set; } = null!;

        [Input("height")]
        public Input<int>? Height { get; set; }

        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("nrql")]
        public Input<string>? Nrql { get; set; }

        [Input("row", required: true)]
        public Input<int> Row { get; set; } = null!;

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("visualization", required: true)]
        public Input<string> Visualization { get; set; } = null!;

        [Input("width")]
        public Input<int>? Width { get; set; }

        public DashboardWidgetsArgs()
        {
        }
    }

    public sealed class DashboardWidgetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("column", required: true)]
        public Input<int> Column { get; set; } = null!;

        [Input("height")]
        public Input<int>? Height { get; set; }

        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("nrql")]
        public Input<string>? Nrql { get; set; }

        [Input("row", required: true)]
        public Input<int> Row { get; set; } = null!;

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("visualization", required: true)]
        public Input<string> Visualization { get; set; } = null!;

        [Input("width")]
        public Input<int>? Width { get; set; }

        public DashboardWidgetsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DashboardFilter
    {
        public readonly ImmutableArray<string> Attributes;
        public readonly ImmutableArray<string> EventTypes;

        [OutputConstructor]
        private DashboardFilter(
            ImmutableArray<string> attributes,
            ImmutableArray<string> eventTypes)
        {
            Attributes = attributes;
            EventTypes = eventTypes;
        }
    }

    [OutputType]
    public sealed class DashboardWidgets
    {
        public readonly int Column;
        public readonly int? Height;
        public readonly string? Notes;
        public readonly string? Nrql;
        public readonly int Row;
        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        public readonly string Title;
        public readonly string Visualization;
        public readonly int? Width;

        [OutputConstructor]
        private DashboardWidgets(
            int column,
            int? height,
            string? notes,
            string? nrql,
            int row,
            string title,
            string visualization,
            int? width)
        {
            Column = column;
            Height = height;
            Notes = notes;
            Nrql = nrql;
            Row = row;
            Title = title;
            Visualization = visualization;
            Width = width;
        }
    }
    }
}
