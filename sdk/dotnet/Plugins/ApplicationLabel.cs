// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic.Plugins
{
    /// <summary>
    /// #### DEPRECATED! Use at your own risk. This feature may be removed in the next major release.
    /// Use this resource to create, update, and delete an Application label in New Relic.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/application_label.html.markdown.
    /// </summary>
    public partial class ApplicationLabel : Pulumi.CustomResource
    {
        /// <summary>
        /// A string representing the label key/category.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// The resources to which label should be assigned to. At least one of the following attributes must be set.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.ApplicationLabelLinks>> Links { get; private set; } = null!;

        /// <summary>
        /// A string that will be assigned to the label.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationLabel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationLabel(string name, ApplicationLabelArgs args, CustomResourceOptions? options = null)
            : base("newrelic:plugins/applicationLabel:ApplicationLabel", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ApplicationLabel(string name, Input<string> id, ApplicationLabelState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:plugins/applicationLabel:ApplicationLabel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationLabel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationLabel Get(string name, Input<string> id, ApplicationLabelState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationLabel(name, id, state, options);
        }
    }

    public sealed class ApplicationLabelArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A string representing the label key/category.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        [Input("links", required: true)]
        private InputList<Inputs.ApplicationLabelLinksArgs>? _links;

        /// <summary>
        /// The resources to which label should be assigned to. At least one of the following attributes must be set.
        /// </summary>
        public InputList<Inputs.ApplicationLabelLinksArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ApplicationLabelLinksArgs>());
            set => _links = value;
        }

        /// <summary>
        /// A string that will be assigned to the label.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ApplicationLabelArgs()
        {
        }
    }

    public sealed class ApplicationLabelState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A string representing the label key/category.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("links")]
        private InputList<Inputs.ApplicationLabelLinksGetArgs>? _links;

        /// <summary>
        /// The resources to which label should be assigned to. At least one of the following attributes must be set.
        /// </summary>
        public InputList<Inputs.ApplicationLabelLinksGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ApplicationLabelLinksGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// A string that will be assigned to the label.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ApplicationLabelState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ApplicationLabelLinksArgs : Pulumi.ResourceArgs
    {
        [Input("applications")]
        private InputList<int>? _applications;

        /// <summary>
        /// An array of application IDs.
        /// </summary>
        public InputList<int> Applications
        {
            get => _applications ?? (_applications = new InputList<int>());
            set => _applications = value;
        }

        [Input("servers")]
        private InputList<int>? _servers;

        /// <summary>
        /// An array of server IDs.
        /// </summary>
        public InputList<int> Servers
        {
            get => _servers ?? (_servers = new InputList<int>());
            set => _servers = value;
        }

        public ApplicationLabelLinksArgs()
        {
        }
    }

    public sealed class ApplicationLabelLinksGetArgs : Pulumi.ResourceArgs
    {
        [Input("applications")]
        private InputList<int>? _applications;

        /// <summary>
        /// An array of application IDs.
        /// </summary>
        public InputList<int> Applications
        {
            get => _applications ?? (_applications = new InputList<int>());
            set => _applications = value;
        }

        [Input("servers")]
        private InputList<int>? _servers;

        /// <summary>
        /// An array of server IDs.
        /// </summary>
        public InputList<int> Servers
        {
            get => _servers ?? (_servers = new InputList<int>());
            set => _servers = value;
        }

        public ApplicationLabelLinksGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ApplicationLabelLinks
    {
        /// <summary>
        /// An array of application IDs.
        /// </summary>
        public readonly ImmutableArray<int> Applications;
        /// <summary>
        /// An array of server IDs.
        /// </summary>
        public readonly ImmutableArray<int> Servers;

        [OutputConstructor]
        private ApplicationLabelLinks(
            ImmutableArray<int> applications,
            ImmutableArray<int> servers)
        {
            Applications = applications;
            Servers = servers;
        }
    }
    }
}
