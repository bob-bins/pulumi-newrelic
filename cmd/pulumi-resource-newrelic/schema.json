{"name":"newrelic","version":"v1.9.0-alpha.1584916333+gb2d41b8.dirty","description":"A Pulumi package for creating and managing New Relic resources.\n\n\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-newrelic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-newrelic` repo](https://github.com/pulumi/pulumi-newrelic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-newrelic` repo](https://github.com/terraform-providers/terraform-provider-newrelic/issues).","keywords":["pulumi","new relic"],"homepage":"https://pulumi.io","license":"Apache-2.0","repository":"https://github.com/pulumi/pulumi-newrelic","meta":{"moduleFormat":"(.*)(?:/[^/]*)"},"config":{"variables":{"apiKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_API_KEY"]}},"apiUrl":{"type":"string","default":"https://api.newrelic.com/v2","defaultInfo":{"environment":["NEWRELIC_API_URL"]}},"cacertFile":{"type":"string","defaultInfo":{"environment":["NEWRELIC_API_CACERT"]}},"infraApiUrl":{"type":"string","default":"https://infra-api.newrelic.com/v2","defaultInfo":{"environment":["NEWRELIC_INFRA_API_URL"]}},"infrastructureApiUrl":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INFRASTRUCTURE_API_URL"]}},"insecureSkipVerify":{"type":"boolean","defaultInfo":{"environment":["NEWRELIC_API_SKIP_VERIFY"]}},"insightsAccountId":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_ACCOUNT_ID"]}},"insightsInsertKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_INSERT_KEY"]}},"insightsInsertUrl":{"type":"string","default":"https://insights-collector.newrelic.com/v1/accounts","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_INSERT_URL"]}},"insightsQueryKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_QUERY_KEY"]}},"insightsQueryUrl":{"type":"string","default":"https://insights-api.newrelic.com/v1/accounts","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_QUERY_URL"]}},"nerdgraphApiUrl":{"type":"string","defaultInfo":{"environment":["NEWRELIC_NERDGRAPH_API_URL"]}},"syntheticsApiUrl":{"type":"string","default":"https://synthetics.newrelic.com/synthetics/api/v3","defaultInfo":{"environment":["NEWRELIC_SYNTHETICS_API_URL"]}}}},"types":{"newrelic:/AlertChannelConfig:AlertChannelConfig":{"properties":{"apiKey":{"type":"string","language":{"python":{"mapCase":false}}},"authPassword":{"type":"string","language":{"python":{"mapCase":false}}},"authType":{"type":"string","language":{"python":{"mapCase":false}}},"authUsername":{"type":"string","language":{"python":{"mapCase":false}}},"baseUrl":{"type":"string","language":{"python":{"mapCase":false}}},"channel":{"type":"string","language":{"python":{"mapCase":false}}},"headers":{"type":"object","additionalProperties":{"type":"string"},"language":{"python":{"mapCase":false}}},"headersString":{"type":"string","language":{"python":{"mapCase":false}}},"includeJsonAttachment":{"type":"string","language":{"python":{"mapCase":false}}},"key":{"type":"string","language":{"python":{"mapCase":false}}},"payload":{"type":"object","additionalProperties":{"type":"string"},"language":{"python":{"mapCase":false}}},"payloadString":{"type":"string","language":{"python":{"mapCase":false}}},"payloadType":{"type":"string","language":{"python":{"mapCase":false}}},"recipients":{"type":"string","language":{"python":{"mapCase":false}}},"region":{"type":"string","language":{"python":{"mapCase":false}}},"routeKey":{"type":"string","language":{"python":{"mapCase":false}}},"serviceKey":{"type":"string","language":{"python":{"mapCase":false}}},"tags":{"type":"string","language":{"python":{"mapCase":false}}},"teams":{"type":"string","language":{"python":{"mapCase":false}}},"url":{"type":"string","language":{"python":{"mapCase":false}}},"userId":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object"},"newrelic:/AlertConditionTerm:AlertConditionTerm":{"properties":{"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"operator":{"type":"string","language":{"python":{"mapCase":false}}},"priority":{"type":"string","language":{"python":{"mapCase":false}}},"threshold":{"type":"number","language":{"python":{"mapCase":false}}},"timeFunction":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["duration","threshold","timeFunction"]},"newrelic:/DashboardFilter:DashboardFilter":{"properties":{"attributes":{"type":"array","items":{"type":"string"},"language":{"python":{"mapCase":false}}},"eventTypes":{"type":"array","items":{"type":"string"},"language":{"python":{"mapCase":false}}}},"type":"object","required":["eventTypes"]},"newrelic:/DashboardWidget:DashboardWidget":{"properties":{"column":{"type":"integer","language":{"python":{"mapCase":false}}},"compareWiths":{"type":"array","items":{"$ref":"#/types/newrelic:/DashboardWidgetCompareWith:DashboardWidgetCompareWith"},"language":{"python":{"mapCase":false}}},"drilldownDashboardId":{"type":"integer","language":{"python":{"mapCase":false}}},"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"endTime":{"type":"integer","language":{"python":{"mapCase":false}}},"entityIds":{"type":"array","items":{"type":"integer"},"language":{"python":{"mapCase":false}}},"facet":{"type":"string","language":{"python":{"mapCase":false}}},"height":{"type":"integer","language":{"python":{"mapCase":false}}},"limit":{"type":"integer","language":{"python":{"mapCase":false}}},"metrics":{"type":"array","items":{"$ref":"#/types/newrelic:/DashboardWidgetMetric:DashboardWidgetMetric"},"language":{"python":{"mapCase":false}}},"notes":{"type":"string","language":{"python":{"mapCase":false}}},"nrql":{"type":"string","language":{"python":{"mapCase":false}}},"orderBy":{"type":"string","language":{"python":{"mapCase":false}}},"rawMetricName":{"type":"string","language":{"python":{"mapCase":false}}},"row":{"type":"integer","language":{"python":{"mapCase":false}}},"source":{"type":"string","language":{"python":{"mapCase":false}}},"thresholdRed":{"type":"number","language":{"python":{"mapCase":false}}},"thresholdYellow":{"type":"number","language":{"python":{"mapCase":false}}},"title":{"type":"string","description":"The title of the dashboard.\n","language":{"python":{"mapCase":false}}},"visualization":{"type":"string","language":{"python":{"mapCase":false}}},"widgetId":{"type":"integer","language":{"python":{"mapCase":false}}},"width":{"type":"integer","language":{"python":{"mapCase":false}}}},"type":"object","required":["column","row","title","visualization"]},"newrelic:/DashboardWidgetCompareWith:DashboardWidgetCompareWith":{"properties":{"offsetDuration":{"type":"string","language":{"python":{"mapCase":false}}},"presentation":{"$ref":"#/types/newrelic:/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation","language":{"python":{"mapCase":false}}}},"type":"object","required":["offsetDuration","presentation"]},"newrelic:/DashboardWidgetCompareWithPresentation:DashboardWidgetCompareWithPresentation":{"properties":{"color":{"type":"string","language":{"python":{"mapCase":false}}},"name":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["color","name"]},"newrelic:/DashboardWidgetMetric:DashboardWidgetMetric":{"properties":{"name":{"type":"string","language":{"python":{"mapCase":false}}},"scope":{"type":"string","language":{"python":{"mapCase":false}}},"units":{"type":"string","language":{"python":{"mapCase":false}}},"values":{"type":"array","items":{"type":"string"},"language":{"python":{"mapCase":false}}}},"type":"object","required":["name"]},"newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical":{"properties":{"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"timeFunction":{"type":"string","language":{"python":{"mapCase":false}}},"value":{"type":"number","language":{"python":{"mapCase":false}}}},"type":"object","required":["duration"]},"newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning":{"properties":{"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"timeFunction":{"type":"string","language":{"python":{"mapCase":false}}},"value":{"type":"number","language":{"python":{"mapCase":false}}}},"type":"object","required":["duration"]},"newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql":{"properties":{"query":{"type":"string","language":{"python":{"mapCase":false}}},"sinceValue":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["query","sinceValue"]},"newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm":{"properties":{"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"operator":{"type":"string","language":{"python":{"mapCase":false}}},"priority":{"type":"string","language":{"python":{"mapCase":false}}},"threshold":{"type":"number","language":{"python":{"mapCase":false}}},"timeFunction":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["duration","threshold","timeFunction"]},"newrelic:/getAlertChannelConfig:getAlertChannelConfig":{"properties":{"apiKey":{"type":"string","language":{"python":{"mapCase":false}}},"authPassword":{"type":"string","language":{"python":{"mapCase":false}}},"authType":{"type":"string","language":{"python":{"mapCase":false}}},"authUsername":{"type":"string","language":{"python":{"mapCase":false}}},"baseUrl":{"type":"string","language":{"python":{"mapCase":false}}},"channel":{"type":"string","language":{"python":{"mapCase":false}}},"headers":{"type":"object","additionalProperties":{"type":"string"},"language":{"python":{"mapCase":false}}},"includeJsonAttachment":{"type":"string","language":{"python":{"mapCase":false}}},"key":{"type":"string","language":{"python":{"mapCase":false}}},"payload":{"type":"object","additionalProperties":{"type":"string"},"language":{"python":{"mapCase":false}}},"payloadType":{"type":"string","language":{"python":{"mapCase":false}}},"recipients":{"type":"string","language":{"python":{"mapCase":false}}},"region":{"type":"string","language":{"python":{"mapCase":false}}},"routeKey":{"type":"string","language":{"python":{"mapCase":false}}},"serviceKey":{"type":"string","language":{"python":{"mapCase":false}}},"tags":{"type":"string","language":{"python":{"mapCase":false}}},"teams":{"type":"string","language":{"python":{"mapCase":false}}},"url":{"type":"string","language":{"python":{"mapCase":false}}},"userId":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object"},"newrelic:insights/EventEvent:EventEvent":{"properties":{"attributes":{"type":"array","items":{"$ref":"#/types/newrelic:insights/EventEventAttribute:EventEventAttribute"},"language":{"python":{"mapCase":false}}},"timestamp":{"type":"integer","language":{"python":{"mapCase":false}}},"type":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["attributes","type"]},"newrelic:insights/EventEventAttribute:EventEventAttribute":{"properties":{"key":{"type":"string","language":{"python":{"mapCase":false}}},"type":{"type":"string","language":{"python":{"mapCase":false}}},"value":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["key","value"]},"newrelic:plugins/AlertConditionTerm:AlertConditionTerm":{"properties":{"duration":{"type":"integer","language":{"python":{"mapCase":false}}},"operator":{"type":"string","language":{"python":{"mapCase":false}}},"priority":{"type":"string","language":{"python":{"mapCase":false}}},"threshold":{"type":"number","language":{"python":{"mapCase":false}}},"timeFunction":{"type":"string","language":{"python":{"mapCase":false}}}},"type":"object","required":["duration","threshold","timeFunction"]}},"provider":{"description":"The provider type for the newrelic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/index.html.markdown.\n","inputProperties":{"apiKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_API_KEY"]}},"apiUrl":{"type":"string","default":"https://api.newrelic.com/v2","defaultInfo":{"environment":["NEWRELIC_API_URL"]}},"cacertFile":{"type":"string","defaultInfo":{"environment":["NEWRELIC_API_CACERT"]}},"infraApiUrl":{"type":"string","default":"https://infra-api.newrelic.com/v2","defaultInfo":{"environment":["NEWRELIC_INFRA_API_URL"]}},"infrastructureApiUrl":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INFRASTRUCTURE_API_URL"]}},"insecureSkipVerify":{"type":"boolean","defaultInfo":{"environment":["NEWRELIC_API_SKIP_VERIFY"]}},"insightsAccountId":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_ACCOUNT_ID"]}},"insightsInsertKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_INSERT_KEY"]}},"insightsInsertUrl":{"type":"string","default":"https://insights-collector.newrelic.com/v1/accounts","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_INSERT_URL"]}},"insightsQueryKey":{"type":"string","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_QUERY_KEY"]}},"insightsQueryUrl":{"type":"string","default":"https://insights-api.newrelic.com/v1/accounts","defaultInfo":{"environment":["NEWRELIC_INSIGHTS_QUERY_URL"]}},"nerdgraphApiUrl":{"type":"string","defaultInfo":{"environment":["NEWRELIC_NERDGRAPH_API_URL"]}},"syntheticsApiUrl":{"type":"string","default":"https://synthetics.newrelic.com/synthetics/api/v3","defaultInfo":{"environment":["NEWRELIC_SYNTHETICS_API_URL"]}}}},"resources":{"newrelic:index/alertChannel:AlertChannel":{"description":"Use this resource to create and manage New Relic alert policies.\n\n## Example Usage\n\n##### Email\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertChannel(\"foo\", {\n    config: {\n        includeJsonAttachment: \"1\",\n        recipients: \"foo@example.com\",\n    },\n    type: \"email\",\n});\n```\nSee additional examples.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_channel.html.markdown.\n","properties":{"config":{"$ref":"#/types/newrelic:/AlertChannelConfig:AlertChannelConfig","description":"A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"},"configuration":{"type":"object","additionalProperties":{"$ref":"pulumi.json#/Any"},"description":"**Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.\n","deprecationMessage":"use `config` block instead"},"name":{"type":"string","description":"The name of the channel.\n"},"type":{"type":"string","description":"The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"}},"required":["name","type"],"inputProperties":{"config":{"$ref":"#/types/newrelic:/AlertChannelConfig:AlertChannelConfig","description":"A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"},"configuration":{"type":"object","additionalProperties":{"$ref":"pulumi.json#/Any"},"description":"**Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.\n","deprecationMessage":"use `config` block instead"},"name":{"type":"string","description":"The name of the channel.\n"},"type":{"type":"string","description":"The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"}},"requiredInputs":["type"],"stateInputs":{"description":"Input properties used for looking up and filtering AlertChannel resources.\n","properties":{"config":{"$ref":"#/types/newrelic:/AlertChannelConfig:AlertChannelConfig","description":"A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.\n"},"configuration":{"type":"object","additionalProperties":{"$ref":"pulumi.json#/Any"},"description":"**Deprecated** (Optional) A map of key/value pairs with channel type specific values. This argument is deprecated.  Use the `config` argument instead.\n","deprecationMessage":"use `config` block instead"},"name":{"type":"string","description":"The name of the channel.\n"},"type":{"type":"string","description":"The type of channel.  One of: `email`, `slack`, `opsgenie`, `pagerduty`, `victorops`, or `webhook`.\n"}},"type":"object"}},"newrelic:index/alertCondition:AlertCondition":{"description":"Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.\n\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`. Terms must include at least one `critical` priority term\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_condition.html.markdown.\n","properties":{"conditionScope":{"type":"string","description":"`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"},"enabled":{"type":"boolean","description":"Whether the condition is enabled or not. Defaults to true.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The instance IDs associated with this condition.\n"},"gcMetric":{"type":"string","description":"A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.\n"},"metric":{"type":"string","description":"The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"type":{"type":"string","description":"The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"},"userDefinedMetric":{"type":"string","description":"A custom metric to be evaluated.\n"},"userDefinedValueFunction":{"type":"string","description":"One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"},"violationCloseTimer":{"type":"integer","description":"Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"}},"required":["entities","metric","name","policyId","terms","type"],"inputProperties":{"conditionScope":{"type":"string","description":"`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"},"enabled":{"type":"boolean","description":"Whether the condition is enabled or not. Defaults to true.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The instance IDs associated with this condition.\n"},"gcMetric":{"type":"string","description":"A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.\n"},"metric":{"type":"string","description":"The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"type":{"type":"string","description":"The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"},"userDefinedMetric":{"type":"string","description":"A custom metric to be evaluated.\n"},"userDefinedValueFunction":{"type":"string","description":"One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"},"violationCloseTimer":{"type":"integer","description":"Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"}},"requiredInputs":["entities","metric","policyId","terms","type"],"stateInputs":{"description":"Input properties used for looking up and filtering AlertCondition resources.\n","properties":{"conditionScope":{"type":"string","description":"`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n"},"enabled":{"type":"boolean","description":"Whether the condition is enabled or not. Defaults to true.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The instance IDs associated with this condition.\n"},"gcMetric":{"type":"string","description":"A valid Garbage Collection metric e.g. `GC/G1 Young Generation`. This is required if you are using `apm_jvm_metric` with `gc_cpu_time` condition type.\n"},"metric":{"type":"string","description":"The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"type":{"type":"string","description":"The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n"},"userDefinedMetric":{"type":"string","description":"A custom metric to be evaluated.\n"},"userDefinedValueFunction":{"type":"string","description":"One of: `average`, `min`, `max`, `total`, or `sample_size`.\n"},"violationCloseTimer":{"type":"integer","description":"Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n"}},"type":"object"}},"newrelic:index/alertPolicy:AlertPolicy":{"description":"Use this resource to create and manage New Relic alert policies.\n\n## Example Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.AlertPolicy(\"foo\", {\n    incidentPreference: \"PER_POLICY\", // PER_POLICY is default\n});\n```\nSee additional examples.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_policy.html.markdown.\n","properties":{"channelIds":{"type":"array","items":{"type":"integer"},"description":"An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result\nin a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be\nimported via terraform import.\n"},"createdAt":{"type":"string","description":"The time the policy was created.\n"},"incidentPreference":{"type":"string","description":"The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"},"name":{"type":"string","description":"The name of the policy.\n"},"updatedAt":{"type":"string","description":"The time the policy was last updated.\n"}},"required":["createdAt","name","updatedAt"],"inputProperties":{"channelIds":{"type":"array","items":{"type":"integer"},"description":"An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result\nin a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be\nimported via terraform import.\n"},"incidentPreference":{"type":"string","description":"The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"},"name":{"type":"string","description":"The name of the policy.\n"}},"stateInputs":{"description":"Input properties used for looking up and filtering AlertPolicy resources.\n","properties":{"channelIds":{"type":"array","items":{"type":"integer"},"description":"An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result\nin a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be\nimported via terraform import.\n"},"createdAt":{"type":"string","description":"The time the policy was created.\n"},"incidentPreference":{"type":"string","description":"The rollup strategy for the policy.  Options include: `PER_POLICY`, `PER_CONDITION`, or `PER_CONDITION_AND_TARGET`.  The default is `PER_POLICY`.\n"},"name":{"type":"string","description":"The name of the policy.\n"},"updatedAt":{"type":"string","description":"The time the policy was last updated.\n"}},"type":"object"}},"newrelic:index/alertPolicyChannel:AlertPolicyChannel":{"description":"Use this resource to map alert policies to alert channels in New Relic.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/alert_policy_channel.html.markdown.\n","properties":{"channelId":{"type":"integer","description":"Deprecated. The ID of the channel. Please use the channel_ids argument instead.\n","deprecationMessage":"use `channel_ids` argument instead"},"channelIds":{"type":"array","items":{"type":"integer"},"description":"Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"},"policyId":{"type":"integer","description":"The ID of the policy.\n"}},"required":["policyId"],"inputProperties":{"channelId":{"type":"integer","description":"Deprecated. The ID of the channel. Please use the channel_ids argument instead.\n","deprecationMessage":"use `channel_ids` argument instead"},"channelIds":{"type":"array","items":{"type":"integer"},"description":"Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"},"policyId":{"type":"integer","description":"The ID of the policy.\n"}},"requiredInputs":["policyId"],"stateInputs":{"description":"Input properties used for looking up and filtering AlertPolicyChannel resources.\n","properties":{"channelId":{"type":"integer","description":"Deprecated. The ID of the channel. Please use the channel_ids argument instead.\n","deprecationMessage":"use `channel_ids` argument instead"},"channelIds":{"type":"array","items":{"type":"integer"},"description":"Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid\ndrift your Terraform state.\n"},"policyId":{"type":"integer","description":"The ID of the policy.\n"}},"type":"object"}},"newrelic:index/dashboard:Dashboard":{"description":"Use this resource to create and manage New Relic dashboards.\n\n## Attribute Refence\n\nIn addition to all arguments above, the following attributes are exported:\n\n  * `dashboard_url` - The URL for viewing the dashboard.\n\n### Nested `widget` blocks\n\nAll nested `widget` blocks support the following common arguments:\n\n  * `title` - (Required) A title for the widget.\n  * `visualization` - (Required) How the widget visualizes data.  Valid values are `billboard`, `gauge`, `billboard_comparison`, `facet_bar_chart`, `faceted_line_chart`, `facet_pie_chart`, `facet_table`, `faceted_area_chart`, `heatmap`, `attribute_sheet`, `single_event`, `histogram`, `funnel`, `raw_json`, `event_feed`, `event_table`, `uniques_list`, `line_chart`, `comparison_line_chart`, `markdown`, and `metric_line_chart`.\n  * `row` - (Required) Row position of widget from top left, starting at `1`.\n  * `column` - (Required) Column position of widget from top left, starting at `1`.\n  * `width` - (Optional) Width of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.\n  * `height` - (Optional) Height of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.\n  * `notes` - (Optional) Description of the widget.\n\nEach `visualization` type supports an additional set of arguments:\n\n  * `billboard`, `billboard_comparison`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `threshold_red` - (Optional) Threshold above which the displayed value will be styled with a red color.\n    * `threshold_yellow` - (Optional) Threshold above which the displayed value will be styled with a yellow color.\n  * `gauge`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `threshold_red` - (Required) Threshold above which the displayed value will be styled with a red color.\n    * `threshold_yellow` - (Optional) Threshold above which the displayed value will be styled with a yellow color.\n  * `facet_bar_chart`, `facet_pie_chart`, `facet_table`, `faceted_area_chart`, `faceted_line_chart`, or `heatmap`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n    * `drilldown_dashboard_id` - (Optional) The ID of a dashboard to link to from the widget's facets.\n  * `attribute_sheet`, `comparison_line_chart`, `event_feed`, `event_table`, `funnel`, `histogram`, `line_chart`, `raw_json`, `single_event`, or `uniques_list`:\n    * `nrql` - (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.\n  * `markdown`:\n    * `source` - (Required) The markdown source to be rendered in the widget.\n  * `metric_line_chart`:\n    * `entity_ids` - (Required) A collection of entity ids to display data for.  These are typically application IDs.\n    * `metric` - (Required) A nested block that describes a metric.  Nested `metric` blocks support the following arguments:\n      * `name` - (Required) The metric name to display.\n      * `values` - (Required) The metric values to display.\n    * `duration` - (Required) The duration, in ms, of the time window represented in the chart.\n    * `end_time` - (Optional) The end time of the time window represented in the chart in epoch time.  When not set, the time window will end at the current time.\n    * `facet` - (Optional) Can be set to \"host\" to facet the metric data by host.\n    * `limit` - (Optional) The limit of distinct data series to display.\n  * `application_breakdown`:\n    * `entity_ids` - (Required) A collection of entity IDs to display data. These are typically application IDs.\n\n\n### Nested `filter` block\n\nThe optional filter block supports the following arguments:\n  * `event_types` - (Optional) A list of event types to enable filtering for.\n  * `attributes` - (Optional) A list of attributes belonging to the specified event types to enable filtering for.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/dashboard.html.markdown.\n","properties":{"dashboardUrl":{"type":"string","description":"The URL for viewing the dashboard.\n"},"editable":{"type":"string","description":"Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"},"filter":{"$ref":"#/types/newrelic:/DashboardFilter:DashboardFilter","description":"A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"},"icon":{"type":"string","description":"The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"},"title":{"type":"string","description":"The title of the dashboard.\n"},"visibility":{"type":"string","description":"Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"},"widgets":{"type":"array","items":{"$ref":"#/types/newrelic:/DashboardWidget:DashboardWidget"},"description":"A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"}},"required":["dashboardUrl","title"],"inputProperties":{"editable":{"type":"string","description":"Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"},"filter":{"$ref":"#/types/newrelic:/DashboardFilter:DashboardFilter","description":"A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"},"icon":{"type":"string","description":"The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"},"title":{"type":"string","description":"The title of the dashboard.\n"},"visibility":{"type":"string","description":"Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"},"widgets":{"type":"array","items":{"$ref":"#/types/newrelic:/DashboardWidget:DashboardWidget"},"description":"A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"}},"requiredInputs":["title"],"stateInputs":{"description":"Input properties used for looking up and filtering Dashboard resources.\n","properties":{"dashboardUrl":{"type":"string","description":"The URL for viewing the dashboard.\n"},"editable":{"type":"string","description":"Determines who can edit the dashboard in an account. Valid values are `all`,  `editable_by_all`, `editable_by_owner`, or `read_only`.  Defaults to `editable_by_all`.\n"},"filter":{"$ref":"#/types/newrelic:/DashboardFilter:DashboardFilter","description":"A nested block that describes a dashboard filter.  Exactly one nested `filter` block is allowed. See Nested filter block below for details.\n"},"icon":{"type":"string","description":"The icon for the dashboard.  Valid values are `adjust`, `archive`, `bar-chart`, `bell`, `bolt`, `bug`, `bullhorn`, `bullseye`, `clock-o`, `cloud`, `cog`, `comments-o`, `crosshairs`, `dashboard`, `envelope`, `fire`, `flag`, `flask`, `globe`, `heart`, `leaf`, `legal`, `life-ring`, `line-chart`, `magic`, `mobile`, `money`, `none`, `paper-plane`, `pie-chart`, `puzzle-piece`, `road`, `rocket`, `shopping-cart`, `sitemap`, `sliders`, `tablet`, `thumbs-down`, `thumbs-up`, `trophy`, `usd`, `user`, and `users`.  Defaults to `bar-chart`.\n"},"title":{"type":"string","description":"The title of the dashboard.\n"},"visibility":{"type":"string","description":"Determines who can see the dashboard in an account. Valid values are `all` or `owner`.  Defaults to `all`.\n"},"widgets":{"type":"array","items":{"$ref":"#/types/newrelic:/DashboardWidget:DashboardWidget"},"description":"A nested block that describes a visualization.  Up to 300 `widget` blocks are allowed in a dashboard definition.  See Nested widget blocks below for details.\n"}},"type":"object"}},"newrelic:index/infraAlertCondition:InfraAlertCondition":{"description":"Use this resource to create and manage Infrastructure alert conditions in New Relic.\n\n## Thresholds\n\nThe `critical` and `warning` threshold mapping supports the following arguments:\n\n  * `duration` - (Required) Identifies the number of minutes the threshold must be passed or met for the alert to trigger. Threshold durations must be between 1 and 60 minutes (inclusive).\n  * `value` - (Optional) Threshold value, computed against the `comparison` operator. Supported by `infra_metric` and `infra_process_running` alert condition types.\n  * `time_function` - (Optional) Indicates if the condition needs to be sustained or to just break the threshold once; `all` or `any`. Supported by the `infra_metric` alert condition type.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/infra_alert_condition.html.markdown.\n","properties":{"comparison":{"type":"string","description":"The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"},"createdAt":{"type":"integer","description":"The timestamp the alert condition was created.\n"},"critical":{"$ref":"#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical","description":"Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"},"enabled":{"type":"boolean","description":"Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"},"event":{"type":"string","description":"The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"},"integrationProvider":{"type":"string","description":"For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"},"name":{"type":"string","description":"The Infrastructure alert condition's name.\n"},"policyId":{"type":"integer","description":"The ID of the alert policy where this condition should be used.\n"},"processWhere":{"type":"string","description":"Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"select":{"type":"string","description":"The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"},"type":{"type":"string","description":"The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"},"updatedAt":{"type":"integer","description":"The timestamp the alert condition was last updated.\n"},"violationCloseTimer":{"type":"integer","description":"Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"},"warning":{"$ref":"#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning","description":"Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"},"where":{"type":"string","description":"If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"}},"required":["createdAt","event","name","policyId","type","updatedAt"],"inputProperties":{"comparison":{"type":"string","description":"The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"},"critical":{"$ref":"#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical","description":"Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"},"enabled":{"type":"boolean","description":"Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"},"event":{"type":"string","description":"The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"},"integrationProvider":{"type":"string","description":"For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"},"name":{"type":"string","description":"The Infrastructure alert condition's name.\n"},"policyId":{"type":"integer","description":"The ID of the alert policy where this condition should be used.\n"},"processWhere":{"type":"string","description":"Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"select":{"type":"string","description":"The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"},"type":{"type":"string","description":"The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"},"violationCloseTimer":{"type":"integer","description":"Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"},"warning":{"$ref":"#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning","description":"Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"},"where":{"type":"string","description":"If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"}},"requiredInputs":["policyId","type"],"stateInputs":{"description":"Input properties used for looking up and filtering InfraAlertCondition resources.\n","properties":{"comparison":{"type":"string","description":"The operator used to evaluate the threshold value.  Valid values are `above`, `below`, and `equal`.  Supported by the `infra_metric` and `infra_process_running` condition types.\n"},"createdAt":{"type":"integer","description":"The timestamp the alert condition was created.\n"},"critical":{"$ref":"#/types/newrelic:/InfraAlertConditionCritical:InfraAlertConditionCritical","description":"Identifies the threshold parameters for opening a critical alert violation. See Thresholds below for details.\n"},"enabled":{"type":"boolean","description":"Whether the condition is turned on or off.  Valid values are `true` and `false`.  Defaults to `true`.\n"},"event":{"type":"string","description":"The metric event; for example, `SystemSample` or `StorageSample`.  Supported by the `infra_metric` condition type.\n"},"integrationProvider":{"type":"string","description":"For alerts on integrations, use this instead of `event`.  Supported by the `infra_metric` condition type.\n"},"name":{"type":"string","description":"The Infrastructure alert condition's name.\n"},"policyId":{"type":"integer","description":"The ID of the alert policy where this condition should be used.\n"},"processWhere":{"type":"string","description":"Any filters applied to processes; for example: `commandName = 'java'`.  Supported by the `infra_process_running` condition type.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"select":{"type":"string","description":"The attribute name to identify the metric being targeted; for example, `cpuPercent`, `diskFreePercent`, or `memoryResidentSizeBytes`.  The underlying API will automatically populate this value for Infrastructure integrations (for example `diskFreePercent`), so make sure to explicitly include this value to avoid diff issues.  Supported by the `infra_metric` condition type.\n"},"type":{"type":"string","description":"The type of Infrastructure alert condition.  Valid values are  `infra_process_running`, `infra_metric`, and `infra_host_not_reporting`.\n"},"updatedAt":{"type":"integer","description":"The timestamp the alert condition was last updated.\n"},"violationCloseTimer":{"type":"integer","description":"Determines how much time will pass before a violation is automatically closed. Setting the time limit to 0 prevents a violation from being force-closed.\n"},"warning":{"$ref":"#/types/newrelic:/InfraAlertConditionWarning:InfraAlertConditionWarning","description":"Identifies the threshold parameters for opening a warning alert violation. See Thresholds below for details.\n"},"where":{"type":"string","description":"If applicable, this identifies any Infrastructure host filters used; for example: `hostname LIKE '%cassandra%'`.\n"}},"type":"object"}},"newrelic:index/nrqlAlertCondition:NrqlAlertCondition":{"description":"Use this resource to create and manage NRQL alert conditions in New Relic.\n\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n- `duration` - (Required) In minutes, must be in the range of `1` to `120`, inclusive.\n- `operator` - (Optional) `above`, `below`, or `equal`. Defaults to `equal`.\n- `priority` - (Optional) `critical` or `warning`. Defaults to `critical`.\n- `threshold` - (Required) Must be 0 or greater.\n- `time_function` - (Required) `all` or `any`.\n\n## NRQL\n\nThe `nrql` attribute supports the following arguments:\n\n- `query` - (Required) The NRQL query to execute for the condition.\n- `since_value` - (Required) The value to be used in the `SINCE \u003cX\u003e MINUTES AGO` clause for the NRQL query. Must be between `1` and `20`.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/nrql_alert_condition.html.markdown.\n","properties":{"enabled":{"type":"boolean","description":"Whether to enable the alert condition.\n"},"expectedGroups":{"type":"integer","description":"Number of expected groups when using outlier detection.\n"},"ignoreOverlap":{"type":"boolean","description":"Whether to look for a convergence of groups when using outlier detection.\n"},"name":{"type":"string","description":"The title of the condition.\n"},"nrql":{"$ref":"#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql","description":"A NRQL query.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"},"description":"A list of terms for this condition.\n"},"type":{"type":"string"},"valueFunction":{"type":"string","description":"Possible values are single_value, sum.\n"},"violationTimeLimitSeconds":{"type":"integer","description":"Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n"}},"required":["name","nrql","policyId","terms"],"inputProperties":{"enabled":{"type":"boolean","description":"Whether to enable the alert condition.\n"},"expectedGroups":{"type":"integer","description":"Number of expected groups when using outlier detection.\n"},"ignoreOverlap":{"type":"boolean","description":"Whether to look for a convergence of groups when using outlier detection.\n"},"name":{"type":"string","description":"The title of the condition.\n"},"nrql":{"$ref":"#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql","description":"A NRQL query.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"},"description":"A list of terms for this condition.\n"},"type":{"type":"string"},"valueFunction":{"type":"string","description":"Possible values are single_value, sum.\n"},"violationTimeLimitSeconds":{"type":"integer","description":"Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n"}},"requiredInputs":["nrql","policyId","terms"],"stateInputs":{"description":"Input properties used for looking up and filtering NrqlAlertCondition resources.\n","properties":{"enabled":{"type":"boolean","description":"Whether to enable the alert condition.\n"},"expectedGroups":{"type":"integer","description":"Number of expected groups when using outlier detection.\n"},"ignoreOverlap":{"type":"boolean","description":"Whether to look for a convergence of groups when using outlier detection.\n"},"name":{"type":"string","description":"The title of the condition.\n"},"nrql":{"$ref":"#/types/newrelic:/NrqlAlertConditionNrql:NrqlAlertConditionNrql","description":"A NRQL query.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:/NrqlAlertConditionTerm:NrqlAlertConditionTerm"},"description":"A list of terms for this condition.\n"},"type":{"type":"string"},"valueFunction":{"type":"string","description":"Possible values are single_value, sum.\n"},"violationTimeLimitSeconds":{"type":"integer","description":"Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you\nselect. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.\n"}},"type":"object"}},"newrelic:insights/event:Event":{"properties":{"events":{"type":"array","items":{"$ref":"#/types/newrelic:insights/EventEvent:EventEvent"},"description":"An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"}},"required":["events"],"inputProperties":{"events":{"type":"array","items":{"$ref":"#/types/newrelic:insights/EventEvent:EventEvent"},"description":"An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"}},"requiredInputs":["events"],"stateInputs":{"description":"Input properties used for looking up and filtering Event resources.\n","properties":{"events":{"type":"array","items":{"$ref":"#/types/newrelic:insights/EventEvent:EventEvent"},"description":"An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.\n"}},"type":"object"}},"newrelic:plugins/alertCondition:AlertCondition":{"description":"Use this resource to create and manage plugins alert conditions in New Relic.\n\n## Terms\n\nThe `term` mapping supports the following arguments:\n\n  * `duration` - (Required) In minutes, must be in the range of `5` to `120`, inclusive.\n  * `operator` - (Optional) `above`, `below`, or `equal`.  Defaults to `equal`.\n  * `priority` - (Optional) `critical` or `warning`.  Defaults to `critical`.\n  * `threshold` - (Required) Must be 0 or greater.\n  * `time_function` - (Required) `all` or `any`.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/plugins_alert_condition.html.markdown.\n","properties":{"enabled":{"type":"boolean","description":"Whether or not this condition is enabled.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The plugin component IDs to target.\n"},"metric":{"type":"string","description":"The plugin metric to evaluate.\n"},"metricDescription":{"type":"string","description":"The metric description.\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"pluginGuid":{"type":"string","description":"The GUID of the plugin which produces the metric.\n"},"pluginId":{"type":"string","description":"The ID of the installed plugin instance which produces the metric.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"valueFunction":{"type":"string","description":"The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"}},"required":["entities","metric","metricDescription","name","pluginGuid","pluginId","policyId","terms","valueFunction"],"inputProperties":{"enabled":{"type":"boolean","description":"Whether or not this condition is enabled.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The plugin component IDs to target.\n"},"metric":{"type":"string","description":"The plugin metric to evaluate.\n"},"metricDescription":{"type":"string","description":"The metric description.\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"pluginGuid":{"type":"string","description":"The GUID of the plugin which produces the metric.\n"},"pluginId":{"type":"string","description":"The ID of the installed plugin instance which produces the metric.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"valueFunction":{"type":"string","description":"The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"}},"requiredInputs":["entities","metric","metricDescription","pluginGuid","pluginId","policyId","terms","valueFunction"],"stateInputs":{"description":"Input properties used for looking up and filtering AlertCondition resources.\n","properties":{"enabled":{"type":"boolean","description":"Whether or not this condition is enabled.\n"},"entities":{"type":"array","items":{"type":"integer"},"description":"The plugin component IDs to target.\n"},"metric":{"type":"string","description":"The plugin metric to evaluate.\n"},"metricDescription":{"type":"string","description":"The metric description.\n"},"name":{"type":"string","description":"The title of the condition. Must be between 1 and 64 characters, inclusive.\n"},"pluginGuid":{"type":"string","description":"The GUID of the plugin which produces the metric.\n"},"pluginId":{"type":"string","description":"The ID of the installed plugin instance which produces the metric.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"},"terms":{"type":"array","items":{"$ref":"#/types/newrelic:plugins/AlertConditionTerm:AlertConditionTerm"},"description":"A list of terms for this condition. See Terms below for details.\n"},"valueFunction":{"type":"string","description":"The value function to apply to the metric data.  One of `min`, `max`, `average`, `sample_size`, `total`, or `percent`.\n"}},"type":"object"}},"newrelic:synthetics/alertCondition:AlertCondition":{"description":"Use this resource to create and manage synthetics alert conditions in New Relic.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_alert_condition.html.markdown.\n","properties":{"enabled":{"type":"boolean","description":"Set whether to enable the alert condition. Defaults to `true`.\n"},"monitorId":{"type":"string","description":"The ID of the Synthetics monitor to be referenced in the alert condition. \n"},"name":{"type":"string","description":"The title of this condition.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"}},"required":["monitorId","name","policyId"],"inputProperties":{"enabled":{"type":"boolean","description":"Set whether to enable the alert condition. Defaults to `true`.\n"},"monitorId":{"type":"string","description":"The ID of the Synthetics monitor to be referenced in the alert condition. \n"},"name":{"type":"string","description":"The title of this condition.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"}},"requiredInputs":["monitorId","policyId"],"stateInputs":{"description":"Input properties used for looking up and filtering AlertCondition resources.\n","properties":{"enabled":{"type":"boolean","description":"Set whether to enable the alert condition. Defaults to `true`.\n"},"monitorId":{"type":"string","description":"The ID of the Synthetics monitor to be referenced in the alert condition. \n"},"name":{"type":"string","description":"The title of this condition.\n"},"policyId":{"type":"integer","description":"The ID of the policy where this condition should be used.\n"},"runbookUrl":{"type":"string","description":"Runbook URL to display in notifications.\n"}},"type":"object"}},"newrelic:synthetics/label:Label":{"description":"Use this resource to create, update, and delete a Synthetics label in New Relic.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_label.html.markdown.\n","properties":{"href":{"type":"string","description":"The URL of the Synthetics label.\n"},"monitorId":{"type":"string","description":"The ID of the monitor that will be assigned the label.\n"},"type":{"type":"string","description":"A string representing the label key/category.\n"},"value":{"type":"string","description":"A string representing the label value.\n"}},"required":["href","monitorId","type","value"],"inputProperties":{"monitorId":{"type":"string","description":"The ID of the monitor that will be assigned the label.\n"},"type":{"type":"string","description":"A string representing the label key/category.\n"},"value":{"type":"string","description":"A string representing the label value.\n"}},"requiredInputs":["monitorId","type","value"],"stateInputs":{"description":"Input properties used for looking up and filtering Label resources.\n","properties":{"href":{"type":"string","description":"The URL of the Synthetics label.\n"},"monitorId":{"type":"string","description":"The ID of the monitor that will be assigned the label.\n"},"type":{"type":"string","description":"A string representing the label key/category.\n"},"value":{"type":"string","description":"A string representing the label value.\n"}},"type":"object"}},"newrelic:synthetics/monitor:Monitor":{"description":"Use this resource to create, update, and delete a synthetics monitor in New Relic.\n\n## Example Usage\n\n##### Type: `SIMPLE`\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\n        \"AWS_US_EAST_1\",\n        \"AWS_US_EAST_2\",\n    ],\n    status: \"ENABLED\",\n    type: \"SIMPLE\",\n    uri: \"https://example.com\", // Required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // Optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // Optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\nSee additional examples.\n\n## Additional Examples\n\nType: `BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    bypassHeadRequest: true, // Note: optional for type \"BROWSER\" only\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    treatRedirectAsFailure: true, // Note: optional for type \"BROWSER\" only\n    type: \"BROWSER\",\n    uri: \"https://example.com\", // required for type \"SIMPLE\" and \"BROWSER\"\n    validationString: \"add example validation check here\", // optional for type \"SIMPLE\" and \"BROWSER\"\n    verifySsl: true, // optional for type \"SIMPLE\" and \"BROWSER\"\n});\n```\n\nType: `SCRIPT_BROWSER`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_BROWSER\",\n});\n```\n\nType: `SCRIPT_API`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.Monitor(\"foo\", {\n    frequency: 5,\n    locations: [\"AWS_US_EAST_1\"],\n    status: \"ENABLED\",\n    type: \"SCRIPT_API\",\n});\n```\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_monitor.html.markdown.\n","properties":{"bypassHeadRequest":{"type":"boolean","description":"Bypass HEAD request.\n"},"frequency":{"type":"integer","description":"The interval (in minutes) at which this monitor should run.\n"},"locations":{"type":"array","items":{"type":"string"},"description":"The locations in which this monitor should be run.\n"},"name":{"type":"string","description":"The title of this monitor.\n"},"slaThreshold":{"type":"number","description":"The base threshold for the SLA report.\n"},"status":{"type":"string","description":"The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"},"treatRedirectAsFailure":{"type":"boolean","description":"Fail the monitor check if redirected.\n"},"type":{"type":"string","description":"The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"},"uri":{"type":"string","description":"The URI for the monitor to hit.\n"},"validationString":{"type":"string","description":"The string to validate against in the response.\n"},"verifySsl":{"type":"boolean","description":"Verify SSL.\n"}},"required":["frequency","locations","name","status","type"],"inputProperties":{"bypassHeadRequest":{"type":"boolean","description":"Bypass HEAD request.\n"},"frequency":{"type":"integer","description":"The interval (in minutes) at which this monitor should run.\n"},"locations":{"type":"array","items":{"type":"string"},"description":"The locations in which this monitor should be run.\n"},"name":{"type":"string","description":"The title of this monitor.\n"},"slaThreshold":{"type":"number","description":"The base threshold for the SLA report.\n"},"status":{"type":"string","description":"The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"},"treatRedirectAsFailure":{"type":"boolean","description":"Fail the monitor check if redirected.\n"},"type":{"type":"string","description":"The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"},"uri":{"type":"string","description":"The URI for the monitor to hit.\n"},"validationString":{"type":"string","description":"The string to validate against in the response.\n"},"verifySsl":{"type":"boolean","description":"Verify SSL.\n"}},"requiredInputs":["frequency","locations","status","type"],"stateInputs":{"description":"Input properties used for looking up and filtering Monitor resources.\n","properties":{"bypassHeadRequest":{"type":"boolean","description":"Bypass HEAD request.\n"},"frequency":{"type":"integer","description":"The interval (in minutes) at which this monitor should run.\n"},"locations":{"type":"array","items":{"type":"string"},"description":"The locations in which this monitor should be run.\n"},"name":{"type":"string","description":"The title of this monitor.\n"},"slaThreshold":{"type":"number","description":"The base threshold for the SLA report.\n"},"status":{"type":"string","description":"The monitor status (i.e. `ENABLED`, `MUTED`, `DISABLED`).\n"},"treatRedirectAsFailure":{"type":"boolean","description":"Fail the monitor check if redirected.\n"},"type":{"type":"string","description":"The monitor type. Valid values are `SIMPLE`, `BROWSER`, `SCRIPT_BROWSER`, and `SCRIPT_API`.\n"},"uri":{"type":"string","description":"The URI for the monitor to hit.\n"},"validationString":{"type":"string","description":"The string to validate against in the response.\n"},"verifySsl":{"type":"boolean","description":"Verify SSL.\n"}},"type":"object"}},"newrelic:synthetics/monitorScript:MonitorScript":{"description":"Use this resource to update a synthetics monitor script in New Relic.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_monitor_script.html.markdown.\n","properties":{"monitorId":{"type":"string","description":"The ID of the monitor to attach the script to.\n"},"text":{"type":"string","description":"The plaintext representing the monitor script.\n"}},"required":["monitorId","text"],"inputProperties":{"monitorId":{"type":"string","description":"The ID of the monitor to attach the script to.\n"},"text":{"type":"string","description":"The plaintext representing the monitor script.\n"}},"requiredInputs":["monitorId","text"],"stateInputs":{"description":"Input properties used for looking up and filtering MonitorScript resources.\n","properties":{"monitorId":{"type":"string","description":"The ID of the monitor to attach the script to.\n"},"text":{"type":"string","description":"The plaintext representing the monitor script.\n"}},"type":"object"}},"newrelic:synthetics/secureCredential:SecureCredential":{"description":"Use this resource to create and manage New Relic Synthetic secure credentials.\n\n## Example Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = new newrelic.synthetics.SecureCredential(\"foo\", {\n    description: \"My description\",\n    key: \"MY_KEY\",\n    value: \"My value\",\n});\n```\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/r/synthetics_secure_credential.html.markdown.\n","properties":{"createdAt":{"type":"string","description":"The time the secure credential was created.\n"},"description":{"type":"string","description":"The secure credential's description.\n"},"key":{"type":"string","description":"The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"},"lastUpdated":{"type":"string","description":"The time the secure credential was last updated.\n"},"value":{"type":"string","description":"The secure credential's value. \n"}},"required":["createdAt","key","lastUpdated","value"],"inputProperties":{"createdAt":{"type":"string","description":"The time the secure credential was created.\n"},"description":{"type":"string","description":"The secure credential's description.\n"},"key":{"type":"string","description":"The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"},"lastUpdated":{"type":"string","description":"The time the secure credential was last updated.\n"},"value":{"type":"string","description":"The secure credential's value. \n"}},"requiredInputs":["key","value"],"stateInputs":{"description":"Input properties used for looking up and filtering SecureCredential resources.\n","properties":{"createdAt":{"type":"string","description":"The time the secure credential was created.\n"},"description":{"type":"string","description":"The secure credential's description.\n"},"key":{"type":"string","description":"The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"},"lastUpdated":{"type":"string","description":"The time the secure credential was last updated.\n"},"value":{"type":"string","description":"The secure credential's value. \n"}},"type":"object"}}},"functions":{"newrelic:index/getAlertChannel:getAlertChannel":{"inputs":{"description":"A collection of arguments for invoking getAlertChannel.\n","properties":{"name":{"type":"string","description":"The name of the alert channel in New Relic.\n"}},"type":"object","required":["name"]},"outputs":{"description":"A collection of values returned by getAlertChannel.\n","properties":{"config":{"$ref":"#/types/newrelic:/getAlertChannelConfig:getAlertChannelConfig","description":"Alert channel configuration.\n"},"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"name":{"type":"string"},"policyIds":{"type":"array","items":{"type":"integer"},"description":"A list of policy IDs associated with the alert channel.\n"},"type":{"type":"string","description":"Alert channel type, either: `email`, `opsgenie`, `pagerduty`, `slack`, `victorops`, or `webhook`.\n"}},"type":"object","required":["config","name","policyIds","type","id"]}},"newrelic:index/getAlertPolicy:getAlertPolicy":{"inputs":{"description":"A collection of arguments for invoking getAlertPolicy.\n","properties":{"incidentPreference":{"type":"string"},"name":{"type":"string","description":"The name of the alert policy in New Relic.\n"}},"type":"object","required":["name"]},"outputs":{"description":"A collection of values returned by getAlertPolicy.\n","properties":{"createdAt":{"type":"string","description":"The time the policy was created.\n"},"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"incidentPreference":{"type":"string","description":"The rollup strategy for the policy. Options include: PER_POLICY, PER_CONDITION, or PER_CONDITION_AND_TARGET. The default is PER_POLICY.\n"},"name":{"type":"string"},"updatedAt":{"type":"string","description":"The time the policy was last updated.\n"}},"type":"object","required":["createdAt","name","updatedAt","id"]}},"newrelic:index/getApplication:getApplication":{"inputs":{"description":"A collection of arguments for invoking getApplication.\n","properties":{"name":{"type":"string","description":"The name of the application in New Relic.\n"}},"type":"object","required":["name"]},"outputs":{"description":"A collection of values returned by getApplication.\n","properties":{"hostIds":{"type":"array","items":{"type":"integer"},"description":"A list of host IDs associated with the application.\n"},"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"instanceIds":{"type":"array","items":{"type":"integer"},"description":"A list of instance IDs associated with the application.\n"},"name":{"type":"string"}},"type":"object","required":["hostIds","instanceIds","name","id"]}},"newrelic:index/getKeyTransaction:getKeyTransaction":{"inputs":{"description":"A collection of arguments for invoking getKeyTransaction.\n","properties":{"name":{"type":"string","description":"The name of the key transaction in New Relic.\n"}},"type":"object","required":["name"]},"outputs":{"description":"A collection of values returned by getKeyTransaction.\n","properties":{"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"name":{"type":"string"}},"type":"object","required":["name","id"]}},"newrelic:plugins/getPlugin:getPlugin":{"inputs":{"description":"A collection of arguments for invoking getPlugin.\n","properties":{"guid":{"type":"string","description":"The GUID of the plugin in New Relic.\n"}},"type":"object","required":["guid"]},"outputs":{"description":"A collection of values returned by getPlugin.\n","properties":{"guid":{"type":"string"},"id":{"type":"string","description":"The ID of the installed plugin instance.\n"}},"type":"object","required":["guid","id"]}},"newrelic:plugins/getPluginComponent:getPluginComponent":{"inputs":{"description":"A collection of arguments for invoking getPluginComponent.\n","properties":{"name":{"type":"string","description":"The name of the plugin component.\n"},"pluginId":{"type":"integer","description":"The ID of the plugin instance this component belongs to.\n"}},"type":"object","required":["name","pluginId"]},"outputs":{"description":"A collection of values returned by getPluginComponent.\n","properties":{"healthStatus":{"type":"string","description":"The health status of the plugin component.\n"},"id":{"type":"string","description":"The ID of the plugin component.\n"},"name":{"type":"string"},"pluginId":{"type":"integer"}},"type":"object","required":["healthStatus","id","name","pluginId"]}},"newrelic:synthetics/getMonitor:getMonitor":{"description":"Use this data source to get information about a specific synthetics monitor in New Relic that already exists. This can be used to set up a Synthetics alert condition.\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/d/synthetics_monitor.html.markdown.\n","inputs":{"description":"A collection of arguments for invoking getMonitor.\n","properties":{"name":{"type":"string","description":"The name of the synthetics monitor in New Relic.\n"}},"type":"object","required":["name"]},"outputs":{"description":"A collection of values returned by getMonitor.\n","properties":{"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"monitorId":{"type":"string","description":"The ID of the synthetics monitor.\n"},"name":{"type":"string"}},"type":"object","required":["monitorId","name","id"]}},"newrelic:synthetics/getSecureCredential:getSecureCredential":{"description":"Use this data source to get information about a specific Synthetics secure credential in New Relic that already exists.\n\nNote that the secure credential's value is not returned as an attribute for security reasons.\n\n## Example Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as newrelic from \"@pulumi/newrelic\";\n\nconst foo = newrelic.synthetics.getSecureCredential({\n    key: \"MY_KEY\",\n});\n```\n\n\u003e This content is derived from https://github.com/terraform-providers/terraform-provider-newrelic/blob/master/website/docs/d/synthetics_secure_credential.html.markdown.\n","inputs":{"description":"A collection of arguments for invoking getSecureCredential.\n","properties":{"key":{"type":"string","description":"The secure credential's key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.\n"}},"type":"object","required":["key"]},"outputs":{"description":"A collection of values returned by getSecureCredential.\n","properties":{"createdAt":{"type":"string","description":"The time the secure credential was created.\n"},"description":{"type":"string","description":"The secure credential's description.\n"},"id":{"type":"string","description":"id is the provider-assigned unique ID for this managed resource.\n"},"key":{"type":"string"},"lastUpdated":{"type":"string","description":"The time the secure credential was last updated.\n"}},"type":"object","required":["createdAt","description","key","lastUpdated","id"]}}},"language":{"csharp":{"namespaces":{"index":"index","insights":"Insights","newrelic":"NewRelic","plugins":"Plugins","synthetics":"Synthetics"},"packageReferences":{"Pulumi":"1.9.1-preview","System.Collections.Immutable":"1.6.0"}},"nodejs":{"dependencies":{"@pulumi/pulumi":"^1.0.0"},"devDependencies":{"@types/mime":"^2.0.0","@types/node":"^8.0.25"},"packageDescription":"A Pulumi package for creating and managing New Relic resources.","packageName":"","typescriptVersion":""},"python":{"requires":{"pulumi":"\u003e=1.0.0,\u003c2.0.0"}}}}